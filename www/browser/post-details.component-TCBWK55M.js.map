{
  "version": 3,
  "sources": ["src/app/Screen/post-details/post-details.component.ts", "src/app/Screen/post-details/post-details.component.html"],
  "sourcesContent": ["// src/app/Screen/post-details/post-details.component.ts\r\n\r\nimport {Component, OnInit} from '@angular/core';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {PostService} from '../../Service/Post.service';\r\nimport {CommentService} from '../../Service/Comment.service';\r\nimport {PostDto} from '../../Models/PostDto';\r\nimport {CommentDetails} from '../../Models/CommentDetails';\r\nimport {IonicModule, ModalController, ModalOptions, ToastController} from '@ionic/angular';\r\nimport {NewCommentComponent} from \"../new-comment/new-comment.component\";\r\nimport {NgForOf, NgIf} from \"@angular/common\";\r\nimport {addIcons} from \"ionicons\";\r\nimport {\r\n    bookmark,\r\n    bookmarkOutline,\r\n    chatbubble,\r\n    ellipsisHorizontal,\r\n    exitOutline,\r\n    heart,\r\n    heartOutline,\r\n    shareSocial,\r\n    trash\r\n} from \"ionicons/icons\";\r\nimport {AdminService} from \"../../Service/Admin.service\";\r\nimport {ProfileService} from \"../../Service/profile.service\";\r\nimport {FormsModule} from \"@angular/forms\";\r\nimport {start} from \"@popperjs/core\";\r\n\r\n\r\n@Component({\r\n    selector: 'app-post-details',\r\n    templateUrl: './post-details.component.html',\r\n    styleUrls: ['./post-details.component.scss'],\r\n  imports: [\r\n    IonicModule,\r\n    NgForOf,\r\n    NgIf,\r\n    FormsModule\r\n  ],\r\n    standalone: true\r\n})\r\nexport class PostDetailsComponent implements OnInit {\r\n    postId!: number;\r\n    post!: PostDto;\r\n    comments: CommentDetails[] = [];\r\n\r\n\r\n    isOpen = false;\r\n    reportReason:string= \"\";\r\n    openPopoverIndex: number = -1;\r\n    isAdmin1: boolean = false;\r\n    reportReason1: string = \"\";\r\n\r\n    constructor(\r\n        private router:Router,\r\n        private route: ActivatedRoute,\r\n        private postService: PostService,\r\n        private commentService: CommentService,\r\n        private toastController: ToastController,\r\n        private modalController: ModalController,\r\n        private adminService: AdminService,\r\n        private profile: ProfileService\r\n    ) {addIcons({ bookmark, heart, chatbubble, shareSocial, heartOutline, bookmarkOutline, ellipsisHorizontal, start, trash, exitOutline });}\r\n\r\n    ngOnInit(): void {\r\n        this.postId = Number(this.route.snapshot.paramMap.get('id'));\r\n        this.loadPostDetails();\r\n        this.loadComments();\r\n        this.isAdmin();\r\n    }\r\n\r\n\r\n    // Esta función se llama al hacer click en el ícono y abre el popover correspondiente\r\n    presentPopover(ev: Event, post: any) {\r\n      this.openPopoverIndex = 1;\r\n      // Si necesitas usar el evento (ev) o el post para otra lógica, agrégala aquí.\r\n    }\r\n\r\n    deletePost(post: PostDto, state: string) {\r\n      this.adminService.putWarning(post.post!.id!, state).subscribe({\r\n        next: () => {\r\n          console.log(`Deleted post: ${post.post!.id}`);\r\n          this.isOpen = false;\r\n          this.router.navigate(['/admin']);\r\n        },\r\n        error: (error) => {\r\n          console.error('Error deleting the post:', error);\r\n        }\r\n      });\r\n      this.openPopoverIndex = -1;\r\n    }\r\n\r\n\r\n    isAdmin() {\r\n      this.profile.isAdmin().subscribe({\r\n        next: (isAdmin) => {\r\n          this.isAdmin1 = isAdmin;\r\n        },\r\n        error: (error) => {\r\n          this.isAdmin1 = false;\r\n          console.error('Error checking if user is admin:', error);\r\n        }\r\n      })\r\n    }\r\n\r\n    reportPost(post: PostDto) {\r\n      const token = sessionStorage.getItem('token');\r\n      if (!token) {\r\n        console.error('No token found in session storage');\r\n        return;\r\n      }\r\n\r\n      const postId = post.post?.id;\r\n      if (postId === undefined) {\r\n        console.error('Post ID not found');\r\n        return;\r\n      }\r\n\r\n      if (this.reportReason1 !== \"otro\"){\r\n        this.reportReason = this.reportReason1;\r\n      }\r\n\r\n      this.postService.reportPost(postId, this.reportReason).subscribe({\r\n        next: () => {\r\n          console.log(`Reported post: ${postId}`);\r\n          this.isOpen = false;\r\n          this.reportReason = \"\";\r\n          this.reportReason1 = \"\";\r\n          this.ngOnInit();\r\n        },\r\n        error: (error) => {\r\n          console.error('Error reporting the post:', error);\r\n          this.isOpen = false;\r\n          this.reportReason = \"\";\r\n          this.reportReason1 = \"\";\r\n        }\r\n      });\r\n      this.openPopoverIndex = -1;\r\n    }\r\n\r\n    loadPostDetails() {\r\n        const token = sessionStorage.getItem('token');\r\n        if (token) {\r\n            this.postService.getPostById(token, this.postId).subscribe(\r\n                (post) => {\r\n                    console.log('Datos del post:', post);\r\n                    this.post = post;\r\n\r\n                    // Verificar si el post ha sido gustado\r\n                    const postId = post.post?.id;\r\n                    if (postId !== undefined) {\r\n                        this.postService.hasLikedPost(token, postId).subscribe(\r\n                            (hasLiked) => {\r\n                                this.post.liked = hasLiked;\r\n                            },\r\n                            (error) => console.error('Error checking like status:', error)\r\n                        );\r\n                        this.postService.hasSavedPost(token, postId).subscribe(\r\n                            (hasSaved) => {\r\n                                post.saved = hasSaved;\r\n                            },\r\n                            (error) => {\r\n                                console.error(`Error checking save status for post ${postId}:`, error);\r\n                            }\r\n                        );\r\n                    }\r\n\r\n                },\r\n                (error) => console.error('Error loading post details:', error)\r\n            );\r\n        }\r\n    }\r\n\r\n    loadComments() {\r\n        const token = sessionStorage.getItem('token');\r\n        if (token) {\r\n            this.commentService.getCommentsByPostId(token, this.postId).subscribe(\r\n                (comments) => {\r\n                    console.log('Comentarios:', comments);\r\n                    this.comments = comments;\r\n                },\r\n                (error) => console.error('Error loading comments:', error)\r\n            );\r\n        }\r\n    }\r\n    likePost(post: PostDto) {\r\n        const token = sessionStorage.getItem('token');\r\n        if (!token) {\r\n            console.error('No token found in session storage');\r\n            return;\r\n        }\r\n\r\n        const postId = post.post?.id;\r\n        if (postId === undefined) {\r\n            console.error('Post ID not found');\r\n            return;\r\n        }\r\n\r\n        this.postService.hasLikedPost(token, postId).subscribe(\r\n            (hasLiked) => {\r\n                if (hasLiked) {\r\n\r\n                    this.postService.unlikePost(token, postId).subscribe(\r\n                        () => {\r\n                            console.log(`Unliked post: ${postId}`);\r\n                            post.liked = false;\r\n                            this.ngOnInit();\r\n                        },\r\n                        (error) => console.error('Error unliking the post:', error)\r\n                    );\r\n                } else {\r\n                    this.postService.likePost(token, postId).subscribe(\r\n                        () => {\r\n                            console.log(`Liked post: ${postId}`);\r\n                            post.liked = true;\r\n                            this.ngOnInit();\r\n                        },\r\n                        (error) => console.error('Error liking the post:', error)\r\n                    );\r\n                }\r\n            },\r\n            (error) => console.error('Error checking like status:', error)\r\n        );\r\n    }\r\n\r\n\r\n\r\n    async savePost(post: PostDto) {\r\n        const token = sessionStorage.getItem('token');\r\n        if (!token) {\r\n            console.error('No token found in session storage');\r\n            return;\r\n        }\r\n\r\n        const postId = post.post?.id;\r\n        if (postId === undefined) {\r\n            console.error('Post ID not found');\r\n            return;\r\n        }\r\n\r\n        if (post.saved) {\r\n            // Unsave the post\r\n            this.postService.unsavePost(token, postId).subscribe(\r\n                async () => {\r\n                    console.log(`Unsaved post: ${postId}`);\r\n                    post.saved = false;\r\n                    const toast = await this.toastController.create({\r\n                        message: 'Eliminado de los Post guardados',\r\n                        color: 'success',\r\n                        duration: 2000,\r\n                        position: 'top',\r\n\r\n                    });\r\n                    await toast.present();\r\n                },\r\n                (error) => {\r\n                    console.error('Error unsaving the post:', error);\r\n                }\r\n            );\r\n        } else {\r\n            // Save the post\r\n            this.postService.savePost(token, postId).subscribe(\r\n                async () => {\r\n                    console.log(`Saved post: ${postId}`);\r\n                    post.saved = true;\r\n                    const toast = await this.toastController.create({\r\n                        message: 'Post guardado correctament',\r\n                        color: 'success',\r\n                        duration: 2000,\r\n                        position: 'top',\r\n                        cssClass: 'custom-toast'\r\n                    });\r\n                    await toast.present();\r\n                },\r\n                (error) => {\r\n                    console.error('Error saving the post:', error);\r\n                }\r\n            );\r\n        }\r\n    }\r\n    async openNewCommentModal(idpost: number | undefined) {\r\n        const modal = await this.modalController.create({\r\n            component: NewCommentComponent,\r\n            componentProps: { postId: idpost }\r\n        } as ModalOptions);\r\n\r\n        modal.onDidDismiss().then(() => {\r\n            this.loadPostDetails();\r\n            this.loadComments();\r\n        });\r\n\r\n        await modal.present();\r\n    }\r\n    async sharePost(post: PostDto) {\r\n        const postId = post.post?.id;\r\n        if (postId === undefined) {\r\n            console.error('Post ID not found');\r\n            return;\r\n        }\r\n\r\n        const link = `${window.location.origin}/post-details/${postId}`;\r\n        await navigator.clipboard.writeText(link);\r\n\r\n        const toast = await this.toastController.create({\r\n            message: 'Enlace en el portapapeles',\r\n            color: 'success',\r\n            duration: 2000,\r\n            position: 'top',\r\n            cssClass: 'custom-toast'\r\n        });\r\n        await toast.present();\r\n    }\r\n  navigateToProfile(postId: number | undefined) {\r\n    const token = sessionStorage.getItem('token');\r\n    if (!token) {\r\n      console.error('No token found in session storage');\r\n      return;\r\n    }\r\n\r\n    if (postId === undefined) {\r\n      console.error('Post ID not found');\r\n      return;\r\n    }\r\n\r\n    this.postService.getUserIdByPostId(token, postId).subscribe(\r\n      (userId) => {\r\n        this.router.navigate([`/profile/${userId}`]);\r\n      },\r\n      (error) => {\r\n        console.error('Error fetching user ID:', error);\r\n      }\r\n    );\r\n  }\r\n}\r\n", "<ion-content class=\"custom-scroll\" *ngIf=\"post\">\r\n    <ion-grid class=\"ion-no-padding post-container movil\">\r\n        <div class=\"scroll-container\">\r\n            <ion-row class=\"post\">\r\n                <!-- Información del usuario -->\r\n                <ion-col size=\"12\" class=\"user-info\">\r\n\r\n                    <div style=\"display: flex; align-items: center;\">\r\n                      <ion-button fill=\"clear\" (click)=\"navigateToProfile(post.post?.id)\" style=\"padding: 0;\">\r\n                        <ion-avatar >\r\n                            <img [src]=\"post.avatar\" />\r\n                        </ion-avatar>\r\n                      </ion-button>\r\n                      <span class=\"username\">{{ post.nickname }}</span>\r\n                    </div>\r\n                    <!-- Icono alineado a la derecha con evento de click -->\r\n                   <ion-icon\r\n                    name=\"ellipsis-horizontal\"\r\n                    class=\"more-button\"\r\n                    style=\"margin-left: auto;\"\r\n                    (click)=\"presentPopover($event, post)\"\r\n                  ></ion-icon>\r\n\r\n                    <ion-popover [isOpen]=\"openPopoverIndex === 1\" (didDismiss)=\"openPopoverIndex = -1\">\r\n              <ng-template>\r\n                <div *ngIf=\"!isAdmin1\" style=\"margin: auto; padding-top: 10px;\">\r\n                  <ion-select [(ngModel)]=\"reportReason1\" placeholder=\"Razón de reporte\">\r\n                    <ion-select-option value=\"spam\">Spam</ion-select-option>\r\n                    <ion-select-option value=\"abuso\">Abuso</ion-select-option>\r\n                    <ion-select-option value=\"contenido_inapropiado\">Contenido inapropiado</ion-select-option>\r\n                    <ion-select-option value=\"informacion_falsa\">Información falsa</ion-select-option>\r\n                    <ion-select-option value=\"otro\">Otro</ion-select-option>\r\n                  </ion-select>\r\n\r\n                  <ion-input *ngIf=\"reportReason1 === 'otro'\" placeholder=\"Razón de reporte\" [(ngModel)]=\"reportReason\"></ion-input>\r\n                  <ion-col class=\"post-actions\" size=\"12\" style=\"display: flex; justify-content: center;\">\r\n                    <ion-button color=\"danger\" (click)=\"reportPost(post)\">\r\n                      <ion-icon name=\"trash\" slot=\"start\"></ion-icon>\r\n                      <ion-label>Reportar</ion-label>\r\n                    </ion-button>\r\n                  </ion-col>\r\n                </div>\r\n                <div *ngIf=\"isAdmin1\" style=\"margin: auto\">\r\n                  <ion-col class=\"post-actions\" size=\"12\" style=\"display: flex; justify-content: center;\">\r\n                    <ion-button color=\"danger\" (click)=\"deletePost(post, 'SANCTIONED')\">\r\n                      <ion-icon name=\"trash\" slot=\"start\"></ion-icon>\r\n                      <ion-label>Eliminar y advertir</ion-label>\r\n                    </ion-button>\r\n                  </ion-col>\r\n                  <ion-col class=\"post-actions\" size=\"12\" style=\"display: flex; justify-content: center;\">\r\n                    <ion-button color=\"success\" (click)=\"deletePost(post, 'SOLVED')\">\r\n                      <ion-icon name=\"exit-outline\" slot=\"start\"></ion-icon>\r\n                      <ion-label>Dejar pasar</ion-label>\r\n                    </ion-button>\r\n                  </ion-col>\r\n                </div>\r\n              </ng-template>\r\n            </ion-popover>\r\n\r\n                </ion-col>\r\n\r\n                <!-- Imagen Principal -->\r\n                <ion-col size=\"12\" class=\"post-image\" *ngIf=\"post.image_post\">\r\n                    <ion-img [src]=\"post.image_post\" class=\"responsive-image\"></ion-img>\r\n                </ion-col>\r\n\r\n                <!-- Descripción -->\r\n                <ion-col size=\"12\" class=\"post-description\">\r\n                    {{ post.post?.content || 'Sin descripción disponible.' }}\r\n                </ion-col>\r\n\r\n                <!-- Acciones del Post -->\r\n                <ion-col size=\"12\" class=\"post-actions\">\r\n                    <ion-button (click)=\"likePost(post)\" fill=\"clear\" class=\"action-button\">\r\n                        <ion-icon [name]=\"post.liked ? 'heart' : 'heart-outline'\"></ion-icon>\r\n                        <span>{{ post.numlikes || 0 }}</span>\r\n                    </ion-button>\r\n                    <ion-button fill=\"clear\" class=\"action-button\" (click)=\"openNewCommentModal(post.post?.id)\">\r\n                        <ion-icon name=\"chatbubble\"></ion-icon>\r\n                        <span>{{ post.numcomments || 0 }}</span>\r\n                    </ion-button>\r\n                    <ion-button fill=\"clear\" class=\"action-button\" (click)=\"savePost(post)\">\r\n                        <ion-icon [name]=\"post.saved ? 'bookmark' : 'bookmark-outline'\"></ion-icon>\r\n                    </ion-button>\r\n                    <ion-button fill=\"clear\" class=\"action-button\" (click)=\"sharePost(post)\">\r\n                        <ion-icon name=\"share-social\"></ion-icon>\r\n                    </ion-button>\r\n                </ion-col>\r\n\r\n                <!-- Comentarios -->\r\n                <ion-col size=\"12\" class=\"comments-section\">\r\n                    <ion-list *ngIf=\"comments.length > 0; else noComments\">\r\n                        <ion-item *ngFor=\"let comment of comments\" class=\"comment-item\">\r\n                            <ion-avatar slot=\"start\">\r\n                                <img [src]=\"comment.avatar\"  />\r\n                            </ion-avatar>\r\n                            <ion-label>\r\n                                <h3>{{ comment.nickname }}</h3>\r\n                                <p>{{ comment.content }}</p>\r\n                            </ion-label>\r\n                        </ion-item>\r\n                    </ion-list>\r\n                    <ng-template #noComments>\r\n                        <p>No hay comentarios aún.</p>\r\n                    </ng-template>\r\n                </ion-col>\r\n\r\n            </ion-row>\r\n        </div>\r\n    </ion-grid>\r\n</ion-content>\r\n"],
  "mappings": "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",
  "names": []
}
