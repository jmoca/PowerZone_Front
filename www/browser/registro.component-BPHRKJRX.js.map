{
  "version": 3,
  "sources": ["src/app/Models/Register.ts", "src/app/Screen/registro/registro.component.ts", "src/app/Screen/registro/registro.component.html"],
  "sourcesContent": ["\r\nexport class Register {\r\n    nickname?: string;\r\n    name?: string;\r\n    email?: string;\r\n    bornDate?: string;\r\n    password?: string;\r\n    avatar?: string;\r\n    activo?: boolean;\r\n}\r\n\r\n", "import {Component, OnInit} from '@angular/core';\r\nimport {RegistroService} from '../../Service/profile.service';\r\nimport {Register} from '../../Models/Register';\r\nimport {AlertController, IonicModule} from '@ionic/angular';\r\nimport {CarrouselComponent} from '../../Component/carrousel/carrousel.component';\r\nimport {FormBuilder, FormGroup, ReactiveFormsModule, Validators} from '@angular/forms';\r\nimport {NgIf} from '@angular/common';\r\nimport {Router, RouterModule} from '@angular/router';\r\nimport {LoadingController} from \"@ionic/angular/standalone\";\r\n\r\n@Component({\r\n    selector: 'app-registro',\r\n    templateUrl: './registro.component.html',\r\n    standalone: true,\r\n    imports: [\r\n        IonicModule,\r\n        CarrouselComponent,\r\n        RouterModule,\r\n        NgIf,\r\n        ReactiveFormsModule\r\n    ],\r\n    styleUrls: ['./registro.component.scss']\r\n})\r\nexport class RegistroComponent implements OnInit {\r\n    registerForm: FormGroup;\r\n    // Objeto registro inicializado\r\n    register: Register = new Register();\r\n    // Variable para almacenar el string Base64 del archivo seleccionado\r\n    avatarBase64: string = '';\r\n\r\n    constructor(\r\n        private fb: FormBuilder,\r\n        private registroService: RegistroService,\r\n        private router: Router,\r\n        private alertController: AlertController,\r\n        private loadingController: LoadingController\r\n    ) {\r\n        // Se crea el FormGroup con los validadores correspondientes\r\n        this.registerForm = this.fb.group({\r\n            nickname: [this.register.nickname, Validators.required],\r\n            name: [this.register.name, [Validators.required, Validators.pattern(/^[^\\d]+$/)]],\r\n            email: [this.register.email, [Validators.required, Validators.email]],\r\n            bornDate: [this.register.bornDate, Validators.required],\r\n            password: [this.register.password, [Validators.required, Validators.minLength(8)]],\r\n            // Nota: No se incluye avatar en el FormGroup, ya que se asignará desde la variable avatarBase64\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {}\r\n\r\n    async showAlert(message: string) {\r\n        const alert = await this.alertController.create({\r\n            header: 'Error',\r\n            message,\r\n            buttons: ['OK']\r\n        });\r\n        await alert.present();\r\n    }\r\n\r\n    async onSubmit() {\r\n        if (this.registerForm.valid) {\r\n            const loading = await this.loadingController.create({\r\n                message: 'Registrando...',\r\n            });\r\n            await loading.present();\r\n\r\n            this.register = { ...this.register, ...this.registerForm.value };\r\n            this.register.avatar = this.avatarBase64;\r\n\r\n            this.registroService.registerUser(this.register).subscribe({\r\n                next: async () => {\r\n                    console.info(\"Registro exitoso\");\r\n                    await loading.dismiss();\r\n                    this.router.navigate(['/login']);\r\n                },\r\n                error: async (error) => {\r\n                    console.error(error);\r\n                    await loading.dismiss();\r\n                    this.showAlert('Ha ocurrido un error al registrar el usuario.');\r\n                }\r\n            });\r\n        } else {\r\n            this.markFormTouched();\r\n            this.showAlert('Hay campos vacíos o con información errónea.');\r\n        }\r\n    }\r\n\r\n    // Función para marcar todos los controles del formulario como touched\r\n    markFormTouched() {\r\n        Object.values(this.registerForm.controls).forEach(control => {\r\n            control.markAsTouched();\r\n        });\r\n    }\r\n\r\n    // Función para convertir el archivo seleccionado a Base64 y asignarlo a la variable avatarBase64\r\n    onFileSelected(event: any) {\r\n        const file = event.target.files[0];\r\n        if (file) {\r\n            const reader = new FileReader();\r\n            reader.onload = () => {\r\n                this.avatarBase64 = reader.result as string;\r\n                console.log('File converted to Base64:', this.avatarBase64);\r\n            };\r\n            reader.readAsDataURL(file);\r\n        }\r\n    }\r\n}\r\n", "<ion-content class=\"Registrobody\" style=\"height: 100%\">\r\n    <ion-grid class=\"ion-no-padding\">\r\n        <ion-row>\r\n            <!--En esta columna es donde va la foto de los moviles-->\r\n            <ion-col class=\"Registrobody\">\r\n                <div id=\"onichan\">\r\n                    <img src=\"../../../assets/img/marco2.png\" class=\"overlay-image\">\r\n                    <div id=\"onichan2\">\r\n                        <app-carrousel></app-carrousel>\r\n                    </div>\r\n                </div>\r\n            </ion-col>\r\n            <!--En este es donde está el formulario de registro-->\r\n            <ion-col size-lg=\"6\" size-xs=\"12\" class=\"Registrobody\">\r\n                <div class=\"subForm\">\r\n                    <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">\r\n                        <ion-img src=\"assets/logo.png\" id=\"logo\"></ion-img>\r\n                        <ion-item>\r\n                            <ion-input formControlName=\"nickname\" label=\"Nickname\" placeholder=\"Ingrese su nickname\"></ion-input>\r\n                        </ion-item>\r\n\r\n                        <ion-item [class.invalid]=\"registerForm.get('name')?.invalid && registerForm.get('name')?.touched\">\r\n                            <ion-input formControlName=\"name\" label=\"Nombre\" placeholder=\"Ingrese su nombre\"></ion-input>\r\n                        </ion-item>\r\n                        <p class=\"error\" *ngIf=\"registerForm.get('name')?.invalid && registerForm.get('name')?.touched\">El nombre no puede contener números.</p>\r\n\r\n                        <ion-item [class.invalid]=\"registerForm.get('email')?.invalid && registerForm.get('email')?.touched\">\r\n                            <ion-input formControlName=\"email\" label=\"Correo\" placeholder=\"Ingrese su email\"></ion-input>\r\n                        </ion-item>\r\n                        <p class=\"error\" *ngIf=\"registerForm.get('email')?.invalid && registerForm.get('email')?.touched\">Introduce un correo válido.</p>\r\n\r\n                        <ion-item>\r\n                            <ion-input formControlName=\"bornDate\" label=\"Fecha nacimiento\" type=\"date\"></ion-input>\r\n                        </ion-item>\r\n\r\n                        <ion-item [class.invalid]=\"registerForm.get('password')?.invalid && registerForm.get('password')?.touched\">\r\n                            <ion-input formControlName=\"password\" type=\"password\" label=\"Contraseña\" placeholder=\"Ingrese su contraseña\"></ion-input>\r\n                            <ion-input-password-toggle slot=\"end\"></ion-input-password-toggle>\r\n                        </ion-item>\r\n                        <p class=\"error\" *ngIf=\"registerForm.get('password')?.invalid && registerForm.get('password')?.touched\">La contraseña debe tener al menos 8 caracteres.</p>\r\n\r\n                        <ion-item>\r\n                            <ion-label>Subir Imagen</ion-label>\r\n                            <input type=\"file\" (change)=\"onFileSelected($event)\" />\r\n                        </ion-item>\r\n\r\n                        <ion-button type=\"submit\" expand=\"block\">Registrarse</ion-button>\r\n\r\n                        <div class=\"subForm2\">\r\n                            <ion-text>¿Ya tienes Cuenta?<span> </span></ion-text>\r\n                            <ion-text routerLink=\"/login\"><b>Inicia Sesión</b></ion-text>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </ion-col>\r\n\r\n        </ion-row>\r\n    </ion-grid>\r\n</ion-content>\r\n"],
  "mappings": "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",
  "names": []
}
