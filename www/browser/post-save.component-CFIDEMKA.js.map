{
  "version": 3,
  "sources": ["src/app/Screen/post-save/post-save.component.ts", "src/app/Screen/post-save/post-save.component.html"],
  "sourcesContent": ["import {Component, OnInit} from '@angular/core';\r\nimport {IonicModule, ModalController, ModalOptions, ToastController} from '@ionic/angular';\r\nimport {Router} from '@angular/router';\r\nimport {NewCommentComponent} from '../new-comment/new-comment.component';\r\nimport {CommonModule} from '@angular/common';\r\nimport {PostDto} from '../../Models/PostDto';\r\nimport {PostService} from '../../Service/Post.service';\r\nimport {addIcons} from 'ionicons';\r\nimport {bookmark, bookmarkOutline, chatbubble, heart, heartOutline, shareSocial} from 'ionicons/icons';\r\n\r\n@Component({\r\n    selector: 'app-post-save',\r\n    templateUrl: './post-save.component.html',\r\n    styleUrls: ['./post-save.component.scss'],\r\n    standalone: true,\r\n    imports: [IonicModule, CommonModule]\r\n})\r\nexport class PostSaveComponent implements OnInit {\r\n    savedPosts: PostDto[] = [];\r\n\r\n    constructor(\r\n        private postService: PostService,\r\n        private toastController: ToastController,\r\n        private router: Router,\r\n        private modalController: ModalController\r\n    ) {\r\n        addIcons({ bookmark, heart, chatbubble, shareSocial, heartOutline, bookmarkOutline });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.loadSavedPosts();\r\n        window.addEventListener('postUpdated', this.loadSavedPosts.bind(this));\r\n    }\r\n\r\n\r\n\r\n    loadSavedPosts() {\r\n        const token = sessionStorage.getItem('token');\r\n        if (!token) {\r\n            console.error('No token found in session storage');\r\n            return;\r\n        }\r\n\r\n        this.postService.getAllSavedPosts(token).subscribe(\r\n            (posts) => {\r\n                this.savedPosts = posts;\r\n                this.savedPosts.forEach(post => {\r\n                    const postId = post.post?.id;\r\n                    if (postId !== undefined) {\r\n                        // Check if the user has liked the post\r\n                        this.postService.hasLikedPost(token, postId).subscribe(\r\n                            (hasLiked) => {\r\n                                post.liked = hasLiked;\r\n                            },\r\n                            (error) => {\r\n                                console.error(`Error checking like status for post ${postId}:`, error);\r\n                            }\r\n                        );\r\n\r\n                        // Check if the user has saved the post\r\n                        this.postService.hasSavedPost(token, postId).subscribe(\r\n                            (hasSaved) => {\r\n                                post.saved = hasSaved;\r\n                            },\r\n                            (error) => {\r\n                                console.error(`Error checking save status for post ${postId}:`, error);\r\n                            }\r\n                        );\r\n                    }\r\n                });\r\n            },\r\n            (error) => {\r\n                console.error('Error fetching saved posts:', error);\r\n            }\r\n        );\r\n    }\r\n\r\n    viewPostDetails(post: PostDto) {\r\n        const postId = post.post?.id;\r\n        if (postId !== undefined) {\r\n            this.router.navigate([`/post-details`, postId]);\r\n        } else {\r\n            console.error('Post ID not found');\r\n        }\r\n    }\r\n\r\n    likePost(post: PostDto) {\r\n        const token = sessionStorage.getItem('token');\r\n        if (!token) {\r\n            console.error('No token found in session storage');\r\n            return;\r\n        }\r\n\r\n        const postId = post.post?.id;\r\n        if (postId === undefined) {\r\n            console.error('Post ID not found');\r\n            return;\r\n        }\r\n\r\n        this.postService.hasLikedPost(token, postId).subscribe(\r\n            (hasLiked) => {\r\n                if (hasLiked) {\r\n                    this.postService.unlikePost(token, postId).subscribe(\r\n                        () => {\r\n                            console.log(`Unliked post: ${postId}`);\r\n                            post.liked = false;\r\n                            this.ngOnInit();\r\n                        },\r\n                        (error) => console.error('Error unliking the post:', error)\r\n                    );\r\n                } else {\r\n                    this.postService.likePost(token, postId).subscribe(\r\n                        () => {\r\n                            console.log(`Liked post: ${postId}`);\r\n                            post.liked = true;\r\n                            this.ngOnInit();\r\n                        },\r\n                        (error) => console.error('Error liking the post:', error)\r\n                    );\r\n                }\r\n            },\r\n            (error) => console.error('Error checking like status:', error)\r\n        );\r\n    }\r\n\r\n    async savePost(post: PostDto) {\r\n        const token = sessionStorage.getItem('token');\r\n        if (!token) {\r\n            console.error('No token found in session storage');\r\n            return;\r\n        }\r\n\r\n        const postId = post.post?.id;\r\n        if (postId === undefined) {\r\n            console.error('Post ID not found');\r\n            return;\r\n        }\r\n\r\n        if (post.saved) {\r\n            this.postService.unsavePost(token, postId).subscribe(\r\n                async () => {\r\n                    console.log(`Unsaved post: ${postId}`);\r\n                    post.saved = false;\r\n                    const toast = await this.toastController.create({\r\n                        message: 'Eliminado de los Post guardados',\r\n                        color: 'success',\r\n                        duration: 2000,\r\n                        position: 'top',\r\n                    });\r\n                    await toast.present();\r\n                    this.ngOnInit(); // Reload the component\r\n                },\r\n                (error) => {\r\n                    console.error('Error unsaving the post:', error);\r\n                }\r\n            );\r\n        } else {\r\n            this.postService.savePost(token, postId).subscribe(\r\n                async () => {\r\n                    console.log(`Saved post: ${postId}`);\r\n                    post.saved = true;\r\n                    const toast = await this.toastController.create({\r\n                        message: 'Post guardado correctamente',\r\n                        color: 'success',\r\n                        duration: 2000,\r\n                        position: 'top',\r\n                        cssClass: 'custom-toast'\r\n                    });\r\n                    await toast.present();\r\n                    this.ngOnInit(); // Reload the component\r\n                },\r\n                (error) => {\r\n                    console.error('Error saving the post:', error);\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n    async openNewCommentModal(idpost: number | undefined) {\r\n        const modal = await this.modalController.create({\r\n            component: NewCommentComponent,\r\n            componentProps: { postId: idpost }\r\n        } as ModalOptions);\r\n        await modal.present();\r\n\r\n    }\r\n\r\n    async sharePost(post: PostDto) {\r\n        const postId = post.post?.id;\r\n        if (postId === undefined) {\r\n            console.error('Post ID not found');\r\n            return;\r\n        }\r\n\r\n        const link = `${window.location.origin}/post-details/${postId}`;\r\n        await navigator.clipboard.writeText(link);\r\n\r\n        const toast = await this.toastController.create({\r\n            message: 'Enlace en el portapapeles',\r\n            color: 'success',\r\n            duration: 2000,\r\n            position: 'top',\r\n            cssClass: 'custom-toast'\r\n        });\r\n        await toast.present();\r\n    }\r\n  navigateToProfile(postId: number | undefined) {\r\n    const token = sessionStorage.getItem('token');\r\n    if (!token) {\r\n      console.error('No token found in session storage');\r\n      return;\r\n    }\r\n\r\n    if (postId === undefined) {\r\n      console.error('Post ID not found');\r\n      return;\r\n    }\r\n\r\n    this.postService.getUserIdByPostId(token, postId).subscribe(\r\n      (userId) => {\r\n        this.router.navigate([`/profile/${userId}`]);\r\n      },\r\n      (error) => {\r\n        console.error('Error fetching user ID:', error);\r\n      }\r\n    );\r\n  }\r\n}\r\n", "<ion-content class=\"custom-scroll\">\r\n    <ion-grid class=\"ion-no-padding post-container movil\">\r\n        <div class=\"scroll-container\">\r\n            <ion-row *ngFor=\"let post of savedPosts\" class=\"post\">\r\n                <ion-col size=\"12\" class=\"user-info\">\r\n                  <ion-button fill=\"clear\" (click)=\"navigateToProfile(post.post?.id)\" style=\"padding: 0;\">\r\n                    <ion-avatar>\r\n                        <img alt=\"Imagen perfil\" [src]=\"post.avatar\" />\r\n                    </ion-avatar>\r\n                  </ion-button>\r\n                    <span class=\"username\">{{ post.nickname }}</span>\r\n                </ion-col>\r\n\r\n                <!-- Imagen Principal -->\r\n                <ion-col *ngIf=\"post.image_post\" size=\"12\" class=\"post-image\">\r\n                    <ion-img [src]=\"post.image_post\" class=\"responsive-image\"></ion-img>\r\n                </ion-col>\r\n\r\n\r\n                <!-- DescripciÃ³n -->\r\n                <ion-col size=\"12\" class=\"post-description\">\r\n                    {{ post.post?.content }}\r\n                </ion-col>\r\n\r\n                <!-- Acciones del Post -->\r\n                <ion-col size=\"12\" class=\"post-actions\">\r\n                    <ion-button (click)=\"likePost(post)\" fill=\"clear\" class=\"action-button\">\r\n                        <ion-icon [name]=\"post.liked ? 'heart' : 'heart-outline'\"></ion-icon>\r\n                        <span>{{ post.numlikes }}</span>\r\n                    </ion-button>\r\n                    <ion-button fill=\"clear\" class=\"action-button\" (click)=\"openNewCommentModal(post.post?.id)\">\r\n                        <ion-icon name=\"chatbubble\"></ion-icon>\r\n                        <span>{{ post.numcomments }}</span>\r\n                    </ion-button>\r\n                    <ion-button fill=\"clear\" class=\"action-button\" (click)=\"savePost(post)\">\r\n                        <ion-icon [name]=\"post.saved ? 'bookmark' : 'bookmark-outline'\"></ion-icon>\r\n                    </ion-button>\r\n                    <ion-button fill=\"clear\" class=\"action-button\" (click)=\"sharePost(post)\">\r\n                        <ion-icon name=\"share-social\"></ion-icon>\r\n                    </ion-button>\r\n                </ion-col>\r\n\r\n                <!-- Comentario Destacado -->\r\n                <ion-col size=\"12\" class=\"highlighted-comment\" (click)=\"viewPostDetails(post)\">\r\n                    <div class=\"comment-container\">\r\n                      <ion-avatar\r\n                        *ngIf=\"post.avatarcomment && post.avatarcomment.trim().length > 0\"\r\n                      >\r\n                        <img [src]=\"post.avatarcomment\" />\r\n                      </ion-avatar>\r\n                        <span class=\"comment\">\r\n                            <b>{{ post.nicknamecomment }}</b> {{ post.firstcomment }}\r\n                        </span>\r\n                    </div>\r\n                </ion-col>\r\n            </ion-row>\r\n        </div>\r\n    </ion-grid>\r\n    <ion-fab vertical=\"bottom\" horizontal=\"end\" slot=\"fixed\"></ion-fab>\r\n</ion-content>\r\n"],
  "mappings": "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",
  "names": []
}
