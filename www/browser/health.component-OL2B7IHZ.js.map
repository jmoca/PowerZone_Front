{
  "version": 3,
  "sources": ["src/app/Service/bold.pipe.ts", "src/app/Service/chat-bot.service.ts", "src/app/Screen/health/health.component.ts", "src/app/Screen/health/health.component.html"],
  "sourcesContent": ["import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n    standalone: true,\n    name: 'bold'\n})\nexport class BoldPipe implements PipeTransform {\n    transform(value: string): string {\n        if (!value) return value;\n        return value\n            .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\n            .replace(/\\n/g, '<br>');\n    }\n}\n", "import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {environment} from \"../../environments/environment.prod\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ChatBotService {\n    constructor(private httpClient: HttpClient) {}\n\n  sendMessage(message: string, token: string | null): Observable<any> {\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    return this.httpClient.post<any>(environment.apiUrl + '/chatBot/chat', { text: message }, { headers });\n  }\n}\n", "import {Component, CUSTOM_ELEMENTS_SCHEMA} from '@angular/core';\r\nimport {FormsModule} from '@angular/forms';\r\nimport {IonicModule} from '@ionic/angular';\r\nimport {ChatBotService} from '../../Service/chat-bot.service';\r\nimport {CommonModule} from '@angular/common';\r\nimport {addIcons} from 'ionicons';\r\nimport {logoIonitron, sendOutline, sendSharp} from 'ionicons/icons';\r\nimport {BoldPipe} from '../../Service/bold.pipe';\r\n\r\n@Component({\r\n    selector: 'app-health',\r\n    templateUrl: './health.component.html',\r\n    styleUrls: ['./health.component.scss'],\r\n    standalone: true,\r\n    imports: [FormsModule, IonicModule, CommonModule, BoldPipe],\r\n    schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class HealthComponent {\r\n    messageText: string = '';\r\n    messages: { text: string; isUser: boolean }[] = [];\r\n    isTyping: boolean = false;\r\n\r\n    constructor(private chabot: ChatBotService) {\r\n        addIcons({\r\n            sendSharp, logoIonitron, sendOutline\r\n        });\r\n    }\r\n\r\n  sendMessage() {\r\n    if (this.messageText.trim()) {\r\n      this.messages.push({ text: this.messageText, isUser: true });\r\n      this.isTyping = true;\r\n\r\n      const token = sessionStorage.getItem('token');\r\n      this.chabot.sendMessage(this.messageText, token).subscribe({\r\n        next: (response: any) => {\r\n          console.log('Respuesta del servidor:', response);\r\n          setTimeout(() => {\r\n            let botMessage: string;\r\n            if (typeof response === 'string') {\r\n              botMessage = response;\r\n            } else if (response && typeof response.text === 'string') {\r\n              botMessage = response.text;\r\n            } else {\r\n              botMessage = 'Respuesta no disponible';\r\n            }\r\n            this.messages.push({ text: botMessage, isUser: false });\r\n            this.isTyping = false;\r\n          }, 1000);\r\n        },\r\n        error: (error: any) => {\r\n          console.error('Error en la respuesta:', error);\r\n          const errorMessage = error.error?.text || 'Error al enviar el mensaje';\r\n          this.messages.push({ text: errorMessage, isUser: false });\r\n          this.isTyping = false;\r\n        }\r\n      });\r\n      this.messageText = '';\r\n    } else {\r\n      console.error('El texto del mensaje está vacío');\r\n    }\r\n  }\r\n\r\n}\r\n", "<ion-content fullscreen>\r\n  <ion-grid class=\"chat-container ion-no-padding\">\r\n    <!-- Encabezado del chat -->\r\n    <ion-row class=\"chat-header movil\">\r\n      <ion-col size=\"1\" class=\"icon-back\">\r\n        <ion-icon name=\"arrow-back-outline\"></ion-icon>\r\n      </ion-col>\r\n      <ion-col size=\"1\" class=\"chat-avatar\">\r\n        <ion-icon name=\"logo-ionitron\"></ion-icon>\r\n      </ion-col>\r\n      <ion-col size=\"10\" class=\"chat-user-info\">\r\n        <h4 style=\"padding-left: 20px\">POWERZONE IA</h4>\r\n      </ion-col>\r\n    </ion-row>\r\n\r\n    <!-- Mensajes -->\r\n    <ion-row class=\"chat-messages\">\r\n      <ion-col>\r\n        <div class=\"message-list\">\r\n          <div\r\n            *ngFor=\"let msg of messages\"\r\n            [class.user]=\"msg.isUser\"\r\n            [class.bot]=\"!msg.isUser\"\r\n            class=\"message\"\r\n          >\r\n            <span [innerHTML]=\"msg.text | bold\"></span>\r\n          </div>\r\n\r\n          <!-- Animación de \"escribiendo\" -->\r\n          <div *ngIf=\"isTyping\" class=\"message bot typing-animation\">\r\n            <span>Escribiendo...</span>\r\n            <ion-spinner name=\"dots\" color=\"primary\"></ion-spinner>\r\n          </div>\r\n        </div>\r\n      </ion-col>\r\n    </ion-row>\r\n\r\n    <!-- Input de texto -->\r\n    <ion-row class=\"chat-input-row\">\r\n      <ion-col size=\"9\" size-md=\"10\">\r\n        <ion-input\r\n          style=\"color: white\"\r\n          placeholder=\" Escriba un mensaje...\"\r\n          [(ngModel)]=\"messageText\"\r\n          (keyup.enter)=\"sendMessage()\"\r\n        ></ion-input>\r\n      </ion-col>\r\n      <ion-col size-md=\"2\" class=\"send-icon\">\r\n        <button (click)=\"sendMessage()\">\r\n          <span>Enviar</span>\r\n        </button>\r\n\r\n      </ion-col>\r\n    </ion-row>\r\n  </ion-grid>\r\n</ion-content>\r\n"],
  "mappings": "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",
  "names": []
}
