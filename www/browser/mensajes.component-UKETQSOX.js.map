{
  "version": 3,
  "sources": ["src/app/Screen/mensajes/mensajes.component.ts", "src/app/Screen/mensajes/mensajes.component.html"],
  "sourcesContent": ["import {Component, OnInit} from '@angular/core';\r\nimport {IonicModule, ToastController} from '@ionic/angular';\r\nimport {CommonModule} from '@angular/common';\r\nimport {WebsocketService} from '../../Service/websocket.service';\r\nimport {LoadingController} from '@ionic/angular/standalone';\r\nimport {addIcons} from 'ionicons';\r\nimport {arrowRedoOutline} from 'ionicons/icons';\r\nimport {Router} from '@angular/router';\r\nimport {FormsModule} from \"@angular/forms\";\r\nimport {ProfileService} from '../../Service/profile.service'; // Importa el ProfileService\r\nimport {CloudinaryService} from \"../../Service/Cloudinary.service\";\r\n\r\n@Component({\r\n    selector: 'app-mensajes',\r\n    templateUrl: './mensajes.component.html',\r\n    styleUrls: ['./mensajes.component.scss'],\r\n    standalone: true,\r\n    imports: [IonicModule, CommonModule, FormsModule],\r\n})\r\nexport class MensajesComponent implements OnInit {\r\n    presentingElement!: HTMLElement;\r\n    grupos: any[] = [];\r\n    perfilesSeguidos: any[] = [];\r\n    perfilesSeleccionados: any[] = [];\r\n    nombreGrupo: string = '';\r\n    imagenGrupo: File | null = null;\r\n\r\n    constructor(\r\n        private websocketService: WebsocketService,\r\n        private loadingController: LoadingController,\r\n        private toastController: ToastController,\r\n        private router: Router,\r\n        private profileService: ProfileService,\r\n        private cloudinaryService: CloudinaryService\r\n    ) {\r\n        addIcons({ arrowRedoOutline });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.presentingElement = document.querySelector('.ion-page') as HTMLElement;\r\n        this.cargarGrupos();\r\n    }\r\n\r\n    formatearFecha(timestamp: string): string {\r\n        if (!timestamp) return '';\r\n\r\n        const fechaMensaje = new Date(timestamp);\r\n        const ahora = new Date();\r\n        const diferenciaHoras = (ahora.getTime() - fechaMensaje.getTime()) / (1000 * 60 * 60);\r\n\r\n        if (diferenciaHoras < 24) {\r\n            // Mostrar solo la hora y minutos si es reciente\r\n            return fechaMensaje.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n        } else {\r\n            // Mostrar la fecha si ha pasado más de 24 horas\r\n            return fechaMensaje.toLocaleDateString();\r\n        }\r\n    }\r\n\r\n    async cargarGrupos(): Promise<void> {\r\n        const loading = await this.loadingController.create({ message: 'Cargando grupos...' });\r\n        await loading.present();\r\n\r\n        this.websocketService.getUserGroups().subscribe({\r\n            next: async (response) => {\r\n                this.grupos = response.grupos || [];\r\n\r\n                // Obtener los últimos mensajes de cada grupo\r\n                this.websocketService.getUltimosMensajesPorGrupo().subscribe({\r\n                    next: (mensajesResponse) => {\r\n                        console.log('Mensajes recibidos:', mensajesResponse);\r\n                        this.grupos.forEach(grupo => {\r\n                            grupo.image = this.cloudinaryService.getImage(grupo.image)\r\n                            const mensaje = mensajesResponse.find((m: any) => m.grupoId === grupo.id);\r\n                            if (mensaje) {\r\n                                grupo.ultimoMensaje = mensaje.ultimoMensaje || 'Sin mensajes';\r\n                                grupo.ultimoMensajeHora = this.formatearFecha(mensaje.ultimoMensajeTimestamp);\r\n                            } else {\r\n                                grupo.ultimoMensaje = 'Sin mensajes';\r\n                                grupo.ultimoMensajeHora = '';\r\n                            }\r\n                        });\r\n                    },\r\n                    error: () => {\r\n                        this.grupos.forEach(grupo => {\r\n                            grupo.ultimoMensaje = 'Sin mensajes';\r\n                            grupo.ultimoMensajeHora = '';\r\n                        });\r\n                    }\r\n                });\r\n\r\n                console.log('Grupos cargados:', this.grupos);\r\n                await loading.dismiss();\r\n            },\r\n            error: async (error) => {\r\n                console.error('Error al cargar los grupos:', error);\r\n                await loading.dismiss();\r\n                this.mostrarToast('Error al cargar los grupos.', 'danger');\r\n            },\r\n        });\r\n    }\r\n\r\n\r\n    async mostrarPerfilesSeguidos(): Promise<void> {\r\n        const loading = await this.loadingController.create({ message: 'Cargando perfiles...' });\r\n        await loading.present();\r\n\r\n        this.websocketService.getFollowingProfiles().subscribe({\r\n            next: async (response) => {\r\n                this.perfilesSeguidos = response.perfiles || [];\r\n                this.perfilesSeleccionados = [];\r\n                console.log('Perfiles seguidos:', this.perfilesSeguidos);\r\n                await loading.dismiss();\r\n            },\r\n            error: async (error) => {\r\n                console.error('Error al cargar los perfiles seguidos:', error);\r\n                await loading.dismiss();\r\n                this.mostrarToast('Error al cargar los perfiles seguidos.', 'danger');\r\n            },\r\n        });\r\n    }\r\n\r\n    toggleSeleccionPerfil(perfil: any): void {\r\n        const index = this.perfilesSeleccionados.findIndex(p => p.id === perfil.id);\r\n        if (index > -1) {\r\n            this.perfilesSeleccionados.splice(index, 1);\r\n        } else {\r\n            this.perfilesSeleccionados.push(perfil);\r\n        }\r\n    }\r\n\r\n    async crearGrupoConSeleccionados(): Promise<void> {\r\n        if (!this.nombreGrupo.trim()) {\r\n            this.mostrarToast('El nombre del grupo no puede estar vacío.', 'warning');\r\n            return;\r\n        }\r\n\r\n        if (this.perfilesSeleccionados.length < 1) {\r\n            this.mostrarToast('Debes seleccionar al menos 1 usuarios.', 'warning');\r\n            return;\r\n        }\r\n\r\n        // Validar si se ha seleccionado una imagen\r\n        if (!this.imagenGrupo) {\r\n            this.mostrarToast('Debes elegir una foto para el grupo.', 'warning');\r\n            return;\r\n        }\r\n\r\n        // Obtener el ID del usuario a través del ProfileService\r\n        const token = sessionStorage.getItem('token'); // Asumiendo que el token está guardado en localStorage\r\n        if (!token) {\r\n            this.mostrarToast('No se encontró el token de autenticación.', 'danger');\r\n            return;\r\n        }\r\n\r\n        const profile = await this.profileService.getProfile(token).toPromise();\r\n        const userId = profile.id; // Asumimos que el ID está en el perfil\r\n\r\n        if (!userId) {\r\n            this.mostrarToast('No se encontró el ID del usuario.', 'danger');\r\n            return;\r\n        }\r\n\r\n        // Agregar el ID del usuario actual a la lista de usuarios seleccionados\r\n        this.perfilesSeleccionados.push({ id: userId });\r\n\r\n        const loading = await this.loadingController.create({ message: 'Creando grupo...' });\r\n        await loading.present();\r\n\r\n        const grupoData = { name: this.nombreGrupo };\r\n\r\n        // Crear FormData para enviar el grupo y la imagen (si existe)\r\n        const formData = new FormData();\r\n        formData.append('group', JSON.stringify(grupoData)); // Agregar el nombre del grupo como JSON\r\n        if (this.imagenGrupo) { // Suponiendo que 'imagenGrupo' es el archivo de imagen seleccionado\r\n            formData.append('file', this.imagenGrupo);\r\n        }\r\n\r\n        try {\r\n            const groupName = { name: this.nombreGrupo };\r\n            const file = this.imagenGrupo || undefined;\r\n\r\n            const grupo = await this.websocketService.createGroup(groupName, file).toPromise();\r\n\r\n            console.log('Grupo creado:', grupo);\r\n\r\n            // Agregar usuarios al grupo\r\n            const userIds = this.perfilesSeleccionados.map(p => p.id);\r\n            const response = await this.websocketService.addUsersToGroup(grupo.id, userIds).toPromise();\r\n\r\n            console.log('Usuarios añadidos al grupo correctamente:', response.message);\r\n            this.mostrarToast('Grupo creado con éxito.', 'success');\r\n\r\n            // Redirigir a la página del grupo recién creado\r\n            this.router.navigate([`/prueba/${grupo.id}`]);\r\n\r\n            // Cerrar el modal de loading\r\n            await loading.dismiss();\r\n\r\n            this.cargarGrupos();\r\n        } catch (error) {\r\n            console.error('Error al crear grupo o añadir usuarios:', error);\r\n            this.mostrarToast('Error al crear grupo o añadir usuarios.', 'danger');\r\n\r\n            // Cerrar el modal de loading si ocurre un error\r\n            await loading.dismiss();\r\n        }\r\n    }\r\n\r\n    onFileSelected(event: Event): void {\r\n        const input = event.target as HTMLInputElement;\r\n        if (input?.files?.length) {\r\n            this.imagenGrupo = input.files[0]; // Asigna el archivo seleccionado\r\n        }\r\n    }\r\n\r\n    crearNuevaConversacion(grupoId: string): void {\r\n        console.log(`Crear conversación con el grupo: ${grupoId}`);\r\n        this.mostrarPerfilesSeguidos();\r\n    }\r\n\r\n    verGrupo(grupoId: string): void {\r\n        this.router.navigate([`/prueba/${grupoId}`]);\r\n    }\r\n\r\n    private async mostrarToast(mensaje: string, color: 'success' | 'danger' | 'warning') {\r\n        const toast = await this.toastController.create({ message: mensaje, duration: 2000, color });\r\n        await toast.present();\r\n    }\r\n}\r\n", "<div class=\"ion-page\">\r\n    <ion-toolbar>\r\n        <ion-title class=\"header\">Mensajes directos</ion-title>\r\n    </ion-toolbar>\r\n\r\n    <ion-content style=\"--background: #055a58\" class=\"ion-padding\">\r\n        <!-- Botón para crear una nueva conversación -->\r\n        <ion-button id=\"open-modal\" expand=\"block\" (click)=\"crearNuevaConversacion('someGroupId')\">\r\n            Crear nueva conversación\r\n        </ion-button>\r\n\r\n        <!-- Lista de grupos -->\r\n        <ul style=\"margin-right: 5%\">\r\n            <ion-item *ngFor=\"let grupo of grupos\">\r\n                <ion-avatar slot=\"start\">\r\n                    <!-- Utiliza la URL de la imagen del grupo -->\r\n                    <ion-img [src]=\"grupo.image.toURL()\"></ion-img>\r\n                </ion-avatar>\r\n                <ion-label>\r\n                    <h2>{{ grupo.name }}</h2>\r\n                    <p>{{ grupo.ultimoMensaje }} - <strong>{{ grupo.ultimoMensajeHora }}</strong></p>\r\n                </ion-label>\r\n                <ion-button fill=\"clear\" slot=\"end\" class=\"boton-anyadir\" (click)=\"verGrupo(grupo.id)\">\r\n                    <ion-icon name=\"arrow-redo-outline\"></ion-icon>\r\n                </ion-button>\r\n            </ion-item>\r\n        </ul>\r\n\r\n\r\n        <!-- Modal para seleccionar personas a añadir al grupo -->\r\n        <ion-modal #modal trigger=\"open-modal\" [presentingElement]=\"presentingElement\">\r\n            <ng-template>\r\n                <ion-header>\r\n                    <ion-toolbar>\r\n                        <ion-title>Personas para añadir</ion-title>\r\n                        <ion-buttons slot=\"end\">\r\n                            <ion-button (click)=\"modal.dismiss()\">Cerrar</ion-button>\r\n                        </ion-buttons>\r\n                    </ion-toolbar>\r\n                </ion-header>\r\n\r\n                <ion-content style=\"--background: #096360\">\r\n                    <!-- Campo para ingresar el nombre del grupo -->\r\n                    <ion-item>\r\n                        <ion-label position=\"floating\">Nombre del grupo</ion-label>\r\n                        <ion-input [(ngModel)]=\"nombreGrupo\"></ion-input>\r\n                    </ion-item>\r\n\r\n                    <!-- Lista de perfiles seguidos -->\r\n                    <ion-list style=\"background-color: #042f2e\">\r\n                        <ion-item *ngFor=\"let perfil of perfilesSeguidos\">\r\n                            <ion-avatar slot=\"start\">\r\n                                <ion-img [src]=\"perfil.avatar\"></ion-img>\r\n                            </ion-avatar>\r\n                            <ion-label>\r\n                                <h2>{{ perfil.name }}</h2>\r\n                                <p>{{ perfil.nickname }}</p>\r\n                            </ion-label>\r\n                            <ion-button\r\n                                fill=\"clear\"\r\n                                slot=\"end\"\r\n                                class=\"boton-anyadir\"\r\n                                (click)=\"toggleSeleccionPerfil(perfil)\">\r\n                                <ion-icon name=\"{{ perfilesSeleccionados.includes(perfil) ? 'checkmark' : 'add' }}\"></ion-icon>\r\n                            </ion-button>\r\n                        </ion-item>\r\n                    </ion-list>\r\n                    <!-- HTML para seleccionar una imagen -->\r\n                    <!-- HTML para seleccionar una imagen -->\r\n                    <input type=\"file\" id=\"fileInput\" (change)=\"onFileSelected($event)\" />\r\n                    <label for=\"fileInput\">Seleccionar archivo</label>\r\n\r\n                </ion-content>\r\n\r\n                <ion-footer>\r\n                    <ion-toolbar>\r\n                        <ion-title>\r\n                            Seleccionados: {{ perfilesSeleccionados.length }}\r\n                        </ion-title>\r\n                        <ion-buttons slot=\"end\">\r\n                            <ion-button\r\n                                [disabled]=\"perfilesSeleccionados.length === 0 || !nombreGrupo\"\r\n                                (click)=\"crearGrupoConSeleccionados()\">\r\n                                Crear\r\n                            </ion-button>\r\n                        </ion-buttons>\r\n                    </ion-toolbar>\r\n                </ion-footer>\r\n            </ng-template>\r\n        </ion-modal>\r\n    </ion-content>\r\n</div>\r\n"],
  "mappings": "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",
  "names": []
}
