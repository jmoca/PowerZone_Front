{
  "version": 3,
  "sources": ["src/app/Service/auth.service.ts"],
  "sourcesContent": ["import {Injectable} from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {Observable, tap} from \"rxjs\";\nimport {ProfileService} from \"./profile.service\";\nimport {environment} from \"../../environments/environment.prod\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AuthService {\n    private currentUser: { username: string, nickname: string } | null = null;\n\n    constructor(\n        private http: HttpClient,\n    ) {}\n\n    // Iniciar sesi贸n y manejar el almacenamiento\n    login(loginData: { email: string, password: string }): Observable<any> {\n        return this.http.post<any>(environment.apiUrl + '/auth/login', loginData).pipe(\n            tap(response => {\n                console.log('Respuesta del servidor:', response); // Verifica la respuesta\n\n                // Guardar el token en sessionStorage\n                const token = response.token;\n                if (token) {\n                    sessionStorage.setItem('token', token);\n                }\n\n                // Guardar username y nickname en localStorage\n                const username = response.username;\n                const nickname = response.nickname;\n                if (username && nickname) {\n                    localStorage.setItem('username', username);\n                    localStorage.setItem('nickname', nickname);\n                }\n\n                // Actualizar la informaci贸n actual del usuario\n                this.currentUser = { username, nickname };\n            })\n        );\n    }\n\n\n    // Obtener el token desde sessionStorage\n    getToken(): string | null {\n        return sessionStorage.getItem('token');\n    }\n\n    // Cerrar sesi贸n eliminando datos del almacenamiento\n    logout(): void {\n        sessionStorage.removeItem('token'); // Eliminar token de sessionStorage\n        localStorage.removeItem('username'); // Eliminar username de localStorage\n        localStorage.removeItem('nickname'); // Eliminar nickname de localStorage\n        this.currentUser = null; // Restablecer la informaci贸n actual\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;AASM,IAAO,eAAP,MAAO,aAAW;EAGpB,YACY,MAAgB;AAAhB,SAAA,OAAA;AAHJ,SAAA,cAA6D;EAIlE;;EAGH,MAAM,WAA8C;AAChD,WAAO,KAAK,KAAK,KAAU,YAAY,SAAS,eAAe,SAAS,EAAE,KACtE,IAAI,cAAW;AACX,cAAQ,IAAI,2BAA2B,QAAQ;AAG/C,YAAM,QAAQ,SAAS;AACvB,UAAI,OAAO;AACP,uBAAe,QAAQ,SAAS,KAAK;MACzC;AAGA,YAAM,WAAW,SAAS;AAC1B,YAAM,WAAW,SAAS;AAC1B,UAAI,YAAY,UAAU;AACtB,qBAAa,QAAQ,YAAY,QAAQ;AACzC,qBAAa,QAAQ,YAAY,QAAQ;MAC7C;AAGA,WAAK,cAAc,EAAE,UAAU,SAAQ;IAC3C,CAAC,CAAC;EAEV;;EAIA,WAAQ;AACJ,WAAO,eAAe,QAAQ,OAAO;EACzC;;EAGA,SAAM;AACF,mBAAe,WAAW,OAAO;AACjC,iBAAa,WAAW,UAAU;AAClC,iBAAa,WAAW,UAAU;AAClC,SAAK,cAAc;EACvB;;;mCA7CS,cAAW,mBAAA,UAAA,CAAA;AAAA;gFAAX,cAAW,SAAX,aAAW,WAAA,YAFR,OAAM,CAAA;AAEhB,IAAO,cAAP;",
  "names": []
}
