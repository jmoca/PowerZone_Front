{
  "version": 3,
  "sources": ["src/app/Service/profile.service.ts"],
  "sourcesContent": ["import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {Register} from '../Models/Register';\nimport {Login} from '../Models/Login';\nimport {ProfileTotal} from \"../Models/ProfileTotal\";\nimport {environment} from \"../../environments/environment.prod\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class RegistroService {\n    constructor(private http: HttpClient) { }\n\n    registerUser(user: Register): Observable<any> {\n        return this.http.post<any>(environment.apiUrl + '/auth/create', user);\n    }\n\n    login(login: Login): Observable<any> {\n        return this.http.post<any>(environment.apiUrl + '/auth/login', login);\n    }\n\n    isBanned(token: string): Observable<any> {\n        const headers = new HttpHeaders({ Authorization: token });\n        return this.http.get<any>(environment.apiUrl + '/auth/isBanned', { headers });\n    }\n\n\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ProfileService {\n    private baseUrl = environment.apiUrl + '/profile'; // Proxy configurado\n\n    constructor(private http: HttpClient) {}\n\n    getProfile(token: string): Observable<any> {\n        const headers = new HttpHeaders({ Authorization: token });\n        return this.http.post<any>(`${this.baseUrl}/getData`, {}, { headers });\n    }\n\n    updateProfile(profile: any, token: string): Observable<any> {\n        const headers = new HttpHeaders({ Authorization: token });\n        return this.http.put<any>(`${this.baseUrl}/updateData`, profile, { headers });\n    }\n\n    searchProfiles(query: string): Observable<any[]> {\n        return this.http.get<any[]>(`${this.baseUrl}/search?query=${query}`);\n    }\n\n    searchProfilesById(id: string): Observable<any[]> {\n        return this.http.get<any[]>(`${this.baseUrl}/${id}`);\n    }\n\n    isAdmin() {\n      const headers = new HttpHeaders().set('Authorization', `Bearer ${sessionStorage.getItem('token')}`);\n      return this.http.get<boolean>(environment.apiUrl + '/auth/ImAdmin', {headers})\n    }\n\n    getRecomendations() {\n      const headers = new HttpHeaders().set('Authorization', `Bearer ${sessionStorage.getItem('token')}`);\n      return this.http.get<ProfileTotal[]>(environment.apiUrl + '/profile/recommended', {headers})\n    }\n}\n\n"],
  "mappings": ";;;;;;;;;;;AAWM,IAAO,mBAAP,MAAO,iBAAe;EACxB,YAAoB,MAAgB;AAAhB,SAAA,OAAA;EAAoB;EAExC,aAAa,MAAc;AACvB,WAAO,KAAK,KAAK,KAAU,YAAY,SAAS,gBAAgB,IAAI;EACxE;EAEA,MAAM,OAAY;AACd,WAAO,KAAK,KAAK,KAAU,YAAY,SAAS,eAAe,KAAK;EACxE;EAEA,SAAS,OAAa;AAClB,UAAM,UAAU,IAAI,YAAY,EAAE,eAAe,MAAK,CAAE;AACxD,WAAO,KAAK,KAAK,IAAS,YAAY,SAAS,kBAAkB,EAAE,QAAO,CAAE;EAChF;;;mCAdS,kBAAe,mBAAA,UAAA,CAAA;AAAA;oFAAf,kBAAe,SAAf,iBAAe,WAAA,YAFZ,OAAM,CAAA;AAEhB,IAAO,kBAAP;AAsBA,IAAO,kBAAP,MAAO,gBAAc;EAGvB,YAAoB,MAAgB;AAAhB,SAAA,OAAA;AAFZ,SAAA,UAAU,YAAY,SAAS;EAEA;EAEvC,WAAW,OAAa;AACpB,UAAM,UAAU,IAAI,YAAY,EAAE,eAAe,MAAK,CAAE;AACxD,WAAO,KAAK,KAAK,KAAU,GAAG,KAAK,OAAO,YAAY,CAAA,GAAI,EAAE,QAAO,CAAE;EACzE;EAEA,cAAc,SAAc,OAAa;AACrC,UAAM,UAAU,IAAI,YAAY,EAAE,eAAe,MAAK,CAAE;AACxD,WAAO,KAAK,KAAK,IAAS,GAAG,KAAK,OAAO,eAAe,SAAS,EAAE,QAAO,CAAE;EAChF;EAEA,eAAe,OAAa;AACxB,WAAO,KAAK,KAAK,IAAW,GAAG,KAAK,OAAO,iBAAiB,KAAK,EAAE;EACvE;EAEA,mBAAmB,IAAU;AACzB,WAAO,KAAK,KAAK,IAAW,GAAG,KAAK,OAAO,IAAI,EAAE,EAAE;EACvD;EAEA,UAAO;AACL,UAAM,UAAU,IAAI,YAAW,EAAG,IAAI,iBAAiB,UAAU,eAAe,QAAQ,OAAO,CAAC,EAAE;AAClG,WAAO,KAAK,KAAK,IAAa,YAAY,SAAS,iBAAiB,EAAC,QAAO,CAAC;EAC/E;EAEA,oBAAiB;AACf,UAAM,UAAU,IAAI,YAAW,EAAG,IAAI,iBAAiB,UAAU,eAAe,QAAQ,OAAO,CAAC,EAAE;AAClG,WAAO,KAAK,KAAK,IAAoB,YAAY,SAAS,wBAAwB,EAAC,QAAO,CAAC;EAC7F;;;mCA/BS,iBAAc,mBAAA,UAAA,CAAA;AAAA;mFAAd,iBAAc,SAAd,gBAAc,WAAA,YAFX,OAAM,CAAA;AAEhB,IAAO,iBAAP;",
  "names": []
}
