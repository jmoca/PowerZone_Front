{
  "version": 3,
  "sources": ["src/app/Screen/settings/settings.component.ts", "src/app/Screen/settings/settings.component.html"],
  "sourcesContent": ["import {Component, ElementRef, OnInit, ViewChild} from '@angular/core';\r\nimport {IonicModule, ToastController} from '@ionic/angular';\r\nimport {ProfileSettingsService} from \"../../Service/profile-settings.service\";\r\nimport {ProfileSetting} from \"../../Models/ProfileSetting\";\r\nimport {FormsModule} from \"@angular/forms\";\r\nimport {CommonModule, formatDate} from '@angular/common';\r\nimport {addIcons} from 'ionicons';\r\nimport {colorWandOutline} from 'ionicons/icons';\r\nimport {LoadingController} from \"@ionic/angular/standalone\";\r\n\r\n@Component({\r\n    selector: 'app-settings',\r\n    templateUrl: './settings.component.html',\r\n    styleUrls: ['./settings.component.scss'],\r\n    standalone: true,\r\n    imports: [\r\n        IonicModule,\r\n        FormsModule,\r\n        CommonModule\r\n    ]\r\n})\r\nexport class SettingsComponent implements OnInit {\r\n    profile: ProfileSetting = {\r\n        nickName: '',\r\n        name: '',\r\n        email: '',\r\n        bornDate: '',\r\n        avatar: ''\r\n    };\r\n    originalProfile!: ProfileSetting; // Para comparar los valores iniciales con los actuales\r\n    selectedAvatar: string | null = null; // Para almacenar la imagen seleccionada\r\n\r\n    constructor(private profileSettings: ProfileSettingsService,private loadingController: LoadingController,private toastController: ToastController) { addIcons({colorWandOutline})}\r\n\r\n    ngOnInit() {\r\n        const token = sessionStorage.getItem('token');\r\n        if (token) {\r\n            this.profileSettings.getData(token).subscribe((data: ProfileSetting) => {\r\n                this.originalProfile = { ...data }; // Guardar original sin formatear\r\n                if (data.bornDate) {\r\n                    data.bornDate = formatDate(data.bornDate, 'dd/MM/yyyy', 'en'); // Formatear para mostrar\r\n                }\r\n                this.profile = data;\r\n            });\r\n        } else {\r\n            console.error('Token is null');\r\n        }\r\n    }\r\n\r\n\r\n    @ViewChild('fileInput') fileInput!: ElementRef;\r\n\r\n    triggerFileInput() {\r\n        this.fileInput.nativeElement.click();\r\n    }\r\n\r\n    async updateProfile() {\r\n        const token = sessionStorage.getItem('token');\r\n        if (token) {\r\n            if (this.profile.name && this.profile.email && this.profile.nickName && this.profile.bornDate) {\r\n                const isModified = JSON.stringify(this.profile) !== JSON.stringify(this.originalProfile);\r\n\r\n                if (isModified) {\r\n                    const loading = await this.loadingController.create({\r\n                        message: 'Guardando cambios...',\r\n                    });\r\n                    await loading.present();\r\n\r\n                    // Regresar al formato original antes de enviar al backend\r\n                    const dateParts = this.profile.bornDate.split('/');\r\n                    this.profile.bornDate = `${dateParts[2]}-${dateParts[1]}-${dateParts[0]}`;\r\n                    this.profileSettings.updateProfile(token, this.profile).subscribe(async response => {\r\n                        this.presentToast('Cambios guardados');\r\n                        await loading.dismiss();\r\n                        this.originalProfile = { ...this.profile };\r\n                        this.profile.bornDate = formatDate(this.profile.bornDate!, 'dd/MM/yyyy', 'en');\r\n                    }, async error => {\r\n                        console.error('Error updating profile', error);\r\n                        await loading.dismiss();\r\n                        this.presentToast('Error al guardar los cambios');\r\n                    });\r\n                } else {\r\n                    this.presentToast('No se ha modificado ningún campo');\r\n                }\r\n            } else {\r\n                this.presentToast('Todos los campos deben ser completados');\r\n            }\r\n        } else {\r\n            this.presentToast('Error de autenticación');\r\n        }\r\n    }\r\n\r\n\r\n    // Mostrar el mensaje de toast\r\n    async presentToast(message: string) {\r\n        const toast = await this.toastController.create({\r\n            message: message,\r\n            duration: 2000\r\n        });\r\n        toast.present();\r\n    }\r\n\r\n    onFileSelected(event: any) {\r\n        const file = event.target.files[0];\r\n        if (file) {\r\n            const reader = new FileReader();\r\n            reader.onload = () => {\r\n                this.selectedAvatar = reader.result as string; // Guardar la imagen seleccionada temporalmente\r\n                this.profile.avatar = this.selectedAvatar; // Mostrar la nueva imagen en la vista previa\r\n                console.log('File converted to Base64:', this.selectedAvatar);\r\n            };\r\n            reader.readAsDataURL(file);\r\n        }\r\n    }\r\n\r\n}\r\n", "<ion-content>\r\n    <div class=\"contenido_perfil ion-no-padding\">\r\n        <ion-grid style=\"margin-top: 7%\">\r\n            <ion-row class=\"movil\" style=\"justify-content: center\">\r\n                <div style=\"position: relative; display: inline-block; cursor: pointer;\" (click)=\"triggerFileInput()\">\r\n                    <ion-avatar>\r\n                        <img alt=\"Imagen perfil\" [src]=\"profile.avatar || 'https://picsum.photos/800/400?random=1'\"/>\r\n                    </ion-avatar>\r\n                    <ion-icon name=\"color-wand-outline\"\r\n                              style=\"position: absolute; top: 0; right: 0; background: black; border-radius: 50%; padding: 4px; font-size: 18px;\">\r\n                    </ion-icon>\r\n                </div>\r\n\r\n                <input type=\"file\" #fileInput (change)=\"onFileSelected($event)\" accept=\"image/*\" hidden>\r\n            </ion-row>\r\n            <ion-row style=\"justify-content: center;\">\r\n                <ion-col id=\"contenido_perfil\" size=\"8\">\r\n                    <ion-item>\r\n                        <ion-input [(ngModel)]=\"profile.nickName\" label=\"Nickname\"></ion-input>\r\n                    </ion-item>\r\n                    <ion-item>\r\n                        <ion-input [(ngModel)]=\"profile.name\" label=\"Nombre\"></ion-input>\r\n                    </ion-item>\r\n                    <ion-item>\r\n                        <ion-input [(ngModel)]=\"profile.email\" label=\"Email\"></ion-input>\r\n                    </ion-item>\r\n                    <ion-item>\r\n                        <ion-input [(ngModel)]=\"profile.bornDate\"\r\n                                   label=\"Fecha de nacimiento\"></ion-input>\r\n                    </ion-item>\r\n                    <div style=\"display: flex; justify-content: center\">\r\n                        <ion-button expand=\"block\" (click)=\"updateProfile()\">Actualizar</ion-button>\r\n                    </div>\r\n                </ion-col>\r\n            </ion-row>\r\n        </ion-grid>\r\n    </div>\r\n</ion-content>\r\n"],
  "mappings": "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",
  "names": []
}
