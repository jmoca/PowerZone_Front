{
  "version": 3,
  "sources": ["src/app/Service/Post.service.ts"],
  "sourcesContent": ["import {Injectable} from '@angular/core';\r\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\r\nimport {Observable} from 'rxjs';\r\nimport {Post} from '../Models/Post';\r\nimport {PostDto} from '../Models/PostDto';\r\nimport {environment} from \"../../environments/environment.prod\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PostService {\r\n    private apiUrl = environment.apiUrl + '/post';\r\n\r\n    constructor(private http: HttpClient) {}\r\n\r\n    private getHeaders(token: string): HttpHeaders {\r\n        return new HttpHeaders({\r\n            'Authorization': `Bearer ${token}`,\r\n\r\n        });\r\n    }\r\n  getUserIdByPostId(token: string, postId: number): Observable<number> {\r\n    return this.http.get<number>(`${this.apiUrl}/${postId}/userId`, {\r\n      headers: this.getHeaders(token)\r\n    });\r\n  }\r\n\r\n  getPostsByPattern(pattern: string): Observable<PostDto[]> {\r\n    const token = sessionStorage.getItem('token') || '';\r\n    const headers = this.getHeaders(token);\r\n    return this.http.get<PostDto[]>(`${this.apiUrl}/pattern`, { headers, params: { pattern } });\r\n  }\r\n    getPostById(token: string, postId: number): Observable<PostDto> {\r\n        return this.http.get<PostDto>(environment.apiUrl + `/post/${postId}`, {\r\n            headers: { Authorization: `Bearer ${token}` }\r\n        });\r\n    }\r\n    getFollowedPosts(token: string): Observable<PostDto[]> {\r\n        return this.http.get<PostDto[]>(`${this.apiUrl}/followed`, { headers: this.getHeaders(token) });\r\n    }\r\n    getPostsWithMostLikes(token: string): Observable<PostDto[]> {\r\n      return this.http.get<PostDto[]>(`${this.apiUrl}/most-liked`, { headers: this.getHeaders(token) });\r\n    }\r\n\r\n    getPostsWithMostComments(token: string): Observable<PostDto[]> {\r\n      return this.http.get<PostDto[]>(`${this.apiUrl}/most-commented`, { headers: this.getHeaders(token) });\r\n    }\r\n\r\n    reportPost(postId: number, reason: string): Observable<void> {\r\n      const token = sessionStorage.getItem('token') || '';\r\n      let mesage =  {\r\n        postId: postId,\r\n        contend: reason\r\n      }\r\n        return this.http.post<void>(`${this.apiUrl}/report`, mesage, { headers: this.getHeaders(token) });\r\n    }\r\n\r\n    createPost(token: string, formData: FormData): Observable<PostDto> {\r\n        return this.http.post<PostDto>(`${this.apiUrl}/create`, formData, { headers: this.getHeaders(token) });\r\n    }\r\n\r\n    deletePost(token: string, post: Post): Observable<void> {\r\n        return this.http.request<void>('delete', `${this.apiUrl}/delete`, { body: post, headers: this.getHeaders(token) });\r\n    }\r\n    getAllPosts(token: string): Observable<PostDto[]> {\r\n        return this.http.get<PostDto[]>(`${this.apiUrl}/all`, { headers: this.getHeaders(token) });\r\n    }\r\n\r\n    getUserPostsById(token: string, userId: string): Observable<PostDto[]> {\r\n        const headers = this.getHeaders(token);\r\n        return this.http.get<PostDto[]>(`${this.apiUrl}/userposts/${userId}`, { headers });\r\n    }\r\n    getUserPosts(token: string): Observable<PostDto[]> {\r\n        return this.http.get<PostDto[]>(`${this.apiUrl}/userposts`, { headers: this.getHeaders(token) });\r\n    }\r\n\r\n    savePost(token: string, postId: number| undefined): Observable<string> {\r\n        return this.http.post<string>(`${this.apiUrl}/save`, { postId }, { headers: this.getHeaders(token) });\r\n    }\r\n\r\n    unsavePost(token: string, postId: number): Observable<string> {\r\n        return this.http.post<string>(`${this.apiUrl}/unsave`, { postId }, { headers: this.getHeaders(token) });\r\n    }\r\n    likePost(token: string, post: number | undefined): Observable<string> {\r\n        return this.http.post<string>(`${this.apiUrl}/like`, post, { headers: this.getHeaders(token) });\r\n    }\r\n\r\n    unlikePost(token: string, postId: number) {\r\n        return this.http.post(`${this.apiUrl}/unlike`, postId, {headers:   this.getHeaders(token) });\r\n    }\r\n    hasLikedPost(token: string, postId: number): Observable<boolean> {\r\n        return this.http.post<boolean>(`${this.apiUrl}/hasLiked`, postId, {\r\n            headers: this.getHeaders(token)\r\n        });\r\n    }\r\n    hasSavedPost(token: string, postId: number): Observable<boolean> {\r\n        return this.http.post<boolean>(`${this.apiUrl}/hasSaved`, postId, {\r\n            headers: this.getHeaders(token)\r\n        });\r\n    }\r\n    sharePost(token: string, postId: number): Observable<string> {\r\n        return this.http.post<string>(`${this.apiUrl}/share`, { postId }, { headers: this.getHeaders(token) });\r\n    }\r\n\r\n\r\n    getAllSavedPosts(token: string): Observable<PostDto[]> {\r\n        return this.http.get<PostDto[]>(`${this.apiUrl}/user/saved`, { headers: this.getHeaders(token) });\r\n    }\r\n\r\n    isNewUser(token: string): Observable<boolean> {\r\n        const headers = new HttpHeaders({ Authorization: token });\r\n        return this.http.post<boolean>(environment.apiUrl + '/auth/isTutorialComplete', {},{ headers });\r\n    }\r\n\r\n    changeUserStatus(token: string): Observable<void> {\r\n        const headers = new HttpHeaders({ Authorization: token });\r\n        return this.http.post<void>(environment.apiUrl + '/auth/tutorialComplete', {}, { headers });\r\n    }\r\n\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
