{
  "version": 3,
  "sources": ["src/app/Screen/search/search.component.ts", "src/app/Screen/search/search.component.html", "src/app/Guards/screen-size.guard.ts", "src/app/Service/menusuggestionsService.service.ts", "src/app/Guards/auth.guard.ts", "src/app/app.routes.ts", "src/app/Screen/menu/menu.component.ts", "src/app/Screen/menu/menu.component.html", "src/app/Screen/footer/footer.component.ts", "src/app/Screen/footer/footer.component.html", "src/app/Service/WebSocketNotification.ts", "src/app/app.component.ts", "src/app/app.component.html", "src/main.ts"],
  "sourcesContent": ["import {Component, OnInit} from '@angular/core';\r\nimport {IonicModule} from \"@ionic/angular\";\r\nimport {FormsModule} from \"@angular/forms\";\r\nimport {NgForOf} from \"@angular/common\";\r\nimport {ProfileService} from '../../Service/profile.service'; // Importar el servicio\r\nimport {Router} from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'app-search',\r\n    templateUrl: './search.component.html',\r\n    styleUrls: ['./search.component.scss'],\r\n    standalone: true,\r\n    imports: [\r\n        IonicModule,\r\n        FormsModule,\r\n        NgForOf\r\n    ]\r\n})\r\nexport class SearchComponent implements OnInit {\r\n    searchText: string = ''; // Campo de búsqueda\r\n    users: any[] = []; // Lista dinámica para almacenar los perfiles encontrados\r\n\r\n    constructor(\r\n        private profileService: ProfileService, // Inyectar el servicio\r\n        private router: Router\r\n    ) {}\r\n\r\n    ngOnInit() {}\r\n\r\n    // Método para manejar el cambio en el campo de búsqueda\r\n    onSearchChange() {\r\n        if (this.searchText.trim().length > 0) {\r\n            this.profileService.searchProfiles(this.searchText).subscribe((data) => {\r\n                this.users = data; // Actualizar la lista de usuarios\r\n                console.log(data)\r\n            });\r\n        } else {\r\n            this.users = []; // Limpiar resultados si no hay texto\r\n        }\r\n    }\r\n\r\n    // Método para redirigir al perfil del usuario\r\n    navigateToProfile(id: number) {\r\n        this.router.navigate([`/profile/${id}`]); // Redirige al perfil del usuario\r\n    }\r\n\r\n    // Método para eliminar un usuario de la lista visualmente\r\n    removeUser(user: any) {\r\n        this.users = this.users.filter(u => u !== user);\r\n    }\r\n}\r\n", "<ion-content>\r\n    <div class=\"barra\">\r\n        <ion-icon name=\"search\"></ion-icon>\r\n        <ion-input\r\n            [(ngModel)]=\"searchText\"\r\n            (ionInput)=\"onSearchChange()\"\r\n            type=\"text\"\r\n            placeholder=\"Buscar...\">\r\n        </ion-input>\r\n    </div>\r\n\r\n    <ion-list>\r\n        <ion-list-header>Resultados</ion-list-header>\r\n        <!-- Mostrar los resultados de búsqueda dinámicamente -->\r\n        <ion-item *ngFor=\"let user of users\" lines=\"none\" style=\"--background: transparent;\" (click)=\"navigateToProfile(user.id)\">\r\n            <ion-avatar>\r\n                <img [src]=\"user.avatar || 'https://picsum.photos/200/300?random=1'\" />\r\n            </ion-avatar>\r\n            <ion-label style=\"color: white;\">{{ user.nickname }}</ion-label>\r\n        </ion-item>\r\n    </ion-list>\r\n</ion-content>\r\n", "import {Injectable} from '@angular/core';\r\nimport {CanActivate} from '@angular/router';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class ScreenSizeGuard implements CanActivate {\r\n    canActivate(): boolean {\r\n        const screenWidth = window.innerWidth; // Obtener el ancho de la ventana\r\n        if (screenWidth <= 1000) {\r\n            return true; // Permitir acceso si el ancho es <= 1000px\r\n        } else {\r\n            alert('Esta vista solo está disponible en dispositivos móviles.');\r\n            return false; // Bloquear acceso si el ancho es > 1000px\r\n        }\r\n    }\r\n}\r\n", "import {Injectable} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class MenuSuggestionsService {\n    private menuVisible = new BehaviorSubject<boolean>(true);\n    private suggestionsVisible = new BehaviorSubject<boolean>(true);\n\n    // Observables para los estados\n    menuVisible$ = this.menuVisible.asObservable();\n    suggestionsVisible$ = this.suggestionsVisible.asObservable();\n\n    // Métodos para cambiar la visibilidad\n    setMenuVisible(visible: boolean) {\n        this.menuVisible.next(visible);\n    }\n\n    setSuggestionsVisible(visible: boolean) {\n        this.suggestionsVisible.next(visible);\n    }\n}\n", "import {Injectable} from '@angular/core';\r\nimport {ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot} from '@angular/router';\r\nimport {MenuSuggestionsService} from \"../Service/menusuggestionsService.service\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n\r\n    constructor(private router: Router, private menuSuggestionsService: MenuSuggestionsService) {}\r\n\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\r\n        const token = sessionStorage.getItem('token');\r\n\r\n        if (token) {\r\n            return true;\r\n        } else {\r\n            // Hide the menus before redirecting\r\n            this.menuSuggestionsService.setMenuVisible(false);\r\n            this.menuSuggestionsService.setSuggestionsVisible(false);\r\n\r\n            // Redirect to the login page with query parameters\r\n            this.router.navigate(['/login'], { queryParams: { returnUrl: state.url, fromShare: true } });\r\n\r\n            return false;\r\n        }\r\n    }\r\n}\r\n", "import {Routes} from '@angular/router';\r\nimport {SearchComponent} from \"./Screen/search/search.component\";\r\nimport {ScreenSizeGuard} from \"./Guards/screen-size.guard\";\r\nimport {AuthGuard} from \"./Guards/auth.guard\";\r\n\r\nexport const routes: Routes = [\r\n    {\r\n        path: 'home',\r\n        loadComponent: () => import('./Screen/home/home.page').then((m) => m.HomePage),\r\n    },\r\n    {\r\n        path: '',\r\n        redirectTo: 'registro',\r\n        pathMatch: 'full',\r\n    },\r\n\r\n    {\r\n        path: 'registro',\r\n        loadComponent: () => import('./Screen/registro/registro.component').then((m) => m.RegistroComponent),\r\n    },\r\n    {\r\n        path: 'login',\r\n        loadComponent: () => import('./Screen/login/login.component').then((m) => m.LoginComponent),\r\n    },\r\n    {\r\n        path: 'posts',\r\n        loadComponent: () => import('./Screen/posts/posts.component').then((m) => m.PostsComponent),\r\n    },\r\n    {\r\n        path: 'notification',\r\n        loadComponent: () => import('./Screen/notification/notification.component').then(m => m.NotificationComponent)\r\n    },\r\n    {\r\n        path: 'profile/:id',\r\n        loadComponent: () => import('./Screen/profile/profile.component').then(m => m.ProfileComponent)\r\n    },\r\n    {\r\n        path: 'profile',\r\n        loadComponent: () => import('./Screen/profile/profile.component').then(m => m.ProfileComponent)\r\n    },\r\n    {\r\n        path: 'chat',\r\n        loadComponent: () => import('./Screen/chat/chat.component').then(m => m.ChatComponent)\r\n    },\r\n    {\r\n        path: 'menuoriginal',\r\n        loadComponent: () => import('./Screen/menuoriginal/menuoriginal.component').then(m => m.MenuoriginalComponent),\r\n        canActivate: [AuthGuard],\r\n    },\r\n    {\r\n        path: 'admin',\r\n        loadComponent: () => import('./Screen/admin/admin.component').then(m => m.AdminComponent)\r\n    },\r\n    {\r\n        path: 'search',\r\n        component: SearchComponent,\r\n        canActivate: [ScreenSizeGuard],\r\n\r\n    },\r\n    {\r\n        path: 'settings',\r\n        loadComponent: () => import('./Screen/settings/settings.component').then((m) => m.SettingsComponent),\r\n    },\r\n    {\r\n        path: 'health',\r\n        loadComponent: () => import('./Screen/health/health.component').then((m) => m.HealthComponent),\r\n    },\r\n    {\r\n        path:'recu',\r\n        loadComponent: ()=> import('./Screen/recuperacion-previa/recuperacion-previa.component').then((m) => m.RecuperacionPreviaComponent)\r\n    },\r\n    {\r\n        path: 'post-save',\r\n        loadComponent: () => import('./Screen/post-save/post-save.component').then((m) => m.PostSaveComponent)\r\n    },\r\n    {\r\n        path:'post-details/:id',\r\n        loadComponent: ()=> import('./Screen/post-details/post-details.component').then((m) => m.PostDetailsComponent),\r\n        canActivate: [AuthGuard],\r\n    },\r\n    {\r\n        path:'posts-user/:id',\r\n        loadComponent: ()=> import('./Screen/posts-user/posts-user.component').then((m) => m.PostsUserComponent)\r\n    },\r\n    {\r\n        path: 'prueba/:groupId',\r\n        loadComponent: () => import('./Screen/rafaparaelchat/rafaparaelchat.component').then((m) => m.RafaparaelchatComponent),\r\n    },\r\n    {\r\n        path: 'mensajes'\r\n        ,loadComponent: () => import('./Screen/mensajes/mensajes.component').then((m) => m.MensajesComponent),\r\n    },\r\n    {\r\n        path: 'suggestion',\r\n        loadComponent: () => import('./Screen/suggestions/suggestions.component').then((m) => m.SuggestionsComponent),\r\n        canActivate: [AuthGuard],\r\n    },\r\n    {\r\n        path: 'prueba/:groupId',\r\n        loadComponent: () => import('./Screen/rafaparaelchat/rafaparaelchat.component').then((m) => m.RafaparaelchatComponent),\r\n    }\r\n];\r\n", "// menu.component.ts\r\nimport {Component, OnInit} from '@angular/core';\r\nimport {IonicModule, ModalController, ModalOptions} from '@ionic/angular';\r\nimport {addIcons} from 'ionicons';\r\nimport {\r\n    add,\r\n    closeCircle,\r\n    home,\r\n    notifications,\r\n    personCircleOutline,\r\n    restaurant,\r\n    search,\r\n    settingsSharp\r\n} from 'ionicons/icons';\r\nimport {ProfileService} from '../../Service/profile.service';\r\nimport {Router} from '@angular/router';\r\nimport {NgForOf} from \"@angular/common\";\r\nimport {FormsModule} from \"@angular/forms\";\r\nimport {NewPostComponent} from \"../new-post/new-post.component\";\r\n\r\n@Component({\r\n    selector: 'app-menu',\r\n    templateUrl: './menu.component.html',\r\n    styleUrls: ['./menu.component.scss'],\r\n    standalone: true,\r\n    imports: [\r\n        IonicModule,\r\n        NgForOf,\r\n        FormsModule,\r\n    ]\r\n})\r\nexport class MenuComponent implements OnInit {\r\n    query: string = '';\r\n    profiles: any[] = [];  // Lista para almacenar los perfiles encontrados\r\n\r\n    constructor(\r\n        private profileService: ProfileService,\r\n        private router: Router,\r\n        private modalController: ModalController\r\n    ) {\r\n        addIcons({\r\n            home, search, add, restaurant, notifications, closeCircle, personCircleOutline, settingsSharp\r\n        });\r\n    }\r\n\r\n    ngOnInit() {}\r\n\r\n    async openAddPostModal() {\r\n        const modal = await this.modalController.create({\r\n            component: NewPostComponent\r\n        } as ModalOptions);\r\n        await modal.present();\r\n    }\r\n\r\n    // Método para manejar el cambio de búsqueda\r\n    onSearchChange() {\r\n        if (this.query.trim().length > 0) {\r\n            this.profileService.searchProfiles(this.query).subscribe((data) => {\r\n                this.profiles = data;\r\n            });\r\n        } else {\r\n            this.profiles = []; // Si la consulta está vacía, limpiamos los resultados\r\n        }\r\n    }\r\n\r\n    // Método para redirigir al perfil de un usuario\r\n    navigateToProfile(id: number) {\r\n        this.router.navigate([`/profile/${id}`]); // Cambia la ruta si es necesario\r\n    }\r\n\r\n  LogOut() {\r\n        sessionStorage.clear()\r\n        this.router.navigate(['/login']);\r\n    }\r\n}\r\n", "<body>\r\n<ion-grid class=\"ion-no-padding\">\r\n    <ion-row>\r\n        <ion-col size=\"3\" class=\"menuizq-column\">\r\n          <ion-list class=\"menuizq\">\r\n            <a href=\"/posts\">\r\n              <ion-icon aria-hidden=\"true\" name=\"home\" slot=\"start\"></ion-icon>\r\n            </a><br>\r\n            <a (click)=\"openAddPostModal()\">\r\n              <ion-icon aria-hidden=\"true\" name=\"add\" slot=\"start\"></ion-icon>\r\n            </a><br>\r\n            <a href=\"/mensajes\">\r\n              <ion-icon name=\"paper-plane-outline\" aria-hidden=\"true\" slot=\"start\"></ion-icon>\r\n            </a><br>\r\n            <a href=\"/health\" id=\"chatbot\">\r\n              <ion-icon name=\"logo-ionitron\" aria-hidden=\"true\" slot=\"start\"></ion-icon>\r\n            </a><br>\r\n            <a href=\"/notification\" id=\"notificaciones\">\r\n              <ion-icon aria-hidden=\"true\" name=\"notifications\" slot=\"start\"></ion-icon>\r\n            </a><br>\r\n            <a href=\"/profile\" id=\"perfil\">\r\n              <ion-icon aria-hidden=\"true\" name=\"person-circle-outline\" slot=\"start\"></ion-icon>\r\n            </a><br>\r\n            <a (click)=\"LogOut()\" id=\"cerrar-sesion\">\r\n              <ion-icon aria-hidden=\"true\" name=\"log-in-outline\" slot=\"start\"></ion-icon>\r\n            </a><br>\r\n          </ion-list>\r\n        </ion-col>\r\n        <ion-col size=\"9\" class=\"content-column\">\r\n            <ion-list>\r\n                <h2>Búsqueda</h2>\r\n                <div class=\"recent-list\">\r\n                    <ion-input\r\n                        [(ngModel)]=\"query\"\r\n                        (ionInput)=\"onSearchChange()\"\r\n                        [clearInput]=\"true\"\r\n                        placeholder=\"Buscar\">\r\n                    </ion-input>\r\n                    <h6>Resultados</h6>\r\n                </div>\r\n                <!-- Mostrar los resultados de búsqueda -->\r\n                <ion-item *ngFor=\"let profile of profiles\" (click)=\"navigateToProfile(profile.id)\" lines=\"none\">\r\n                    <ion-avatar slot=\"start\">\r\n                        <img [src]=\"profile.avatar || 'https://picsum.photos/200/300?random=1'\" />\r\n                    </ion-avatar>\r\n                    <ion-label>{{ profile.nickname }}</ion-label>\r\n                </ion-item>\r\n            </ion-list>\r\n        </ion-col>\r\n    </ion-row>\r\n</ion-grid>\r\n</body>\r\n", "import {Component, OnInit} from '@angular/core';\r\nimport {IonicModule, ModalController, ModalOptions} from \"@ionic/angular\";\r\nimport {\r\n    add,\r\n    closeCircle,\r\n    home,\r\n    notifications,\r\n    paperPlaneOutline,\r\n    personCircleOutline,\r\n    restaurant,\r\n    search\r\n} from \"ionicons/icons\";\r\nimport {addIcons} from \"ionicons\";\r\nimport {Router} from \"@angular/router\";\r\nimport {NewPostComponent} from \"../new-post/new-post.component\";\r\n\r\n@Component({\r\n    selector: 'app-footer',\r\n    templateUrl: './footer.component.html',\r\n    styleUrls: ['./footer.component.scss'],\r\n    standalone: true,\r\n    imports: [\r\n        IonicModule\r\n    ]\r\n})\r\nexport class FooterComponent  implements OnInit {\r\n\r\n    constructor(private router: Router,\r\n                private modalController: ModalController,) {\r\n        addIcons({ home, search, add, restaurant, notifications, closeCircle, personCircleOutline, paperPlaneOutline });\r\n    }\r\n\r\n  ngOnInit() {}\r\n\r\n    goToUrl(url:String) {\r\n        this.router.navigate([url]);\r\n    }\r\n\r\n    async openAddPostModal() {\r\n        const modal = await this.modalController.create({\r\n            component: NewPostComponent\r\n        } as ModalOptions);\r\n        await modal.present();\r\n    }\r\n\r\n}\r\n", "<ion-footer>\r\n    <ion-toolbar class=\"custom-footer\">\r\n        <div class=\"footer-images\">\r\n            <ion-button fill=\"clear\" (click)=\"goToUrl('/posts')\">\r\n                <ion-icon name=\"home\" slot=\"start\" style=\"font-size: 28px;\"></ion-icon>\r\n            </ion-button>\r\n            <ion-button fill=\"clear\" (click)=\"goToUrl('/search')\">\r\n                <ion-icon name=\"search\" slot=\"start\" style=\"font-size: 28px;\"></ion-icon>\r\n            </ion-button>\r\n            <ion-button fill=\"clear\" (click)=\"openAddPostModal()\">\r\n                <ion-icon name=\"add\" slot=\"start\" style=\"font-size: 28px;\"></ion-icon>\r\n            </ion-button>\r\n            <ion-button fill=\"clear\" (click)=\"goToUrl('/health')\">\r\n                <ion-icon name=\"logo-ionitron\" slot=\"start\" style=\"font-size: 28px\"></ion-icon>\r\n            </ion-button>\r\n            <ion-button fill=\"clear\" (click)=\"goToUrl('/profile')\">\r\n                <ion-icon name=\"person-circle-outline\" slot=\"start\" style=\"font-size: 34px;\"></ion-icon>\r\n            </ion-button>\r\n        </div>\r\n    </ion-toolbar>\r\n</ion-footer>\r\n", "import {Injectable} from '@angular/core';\nimport {Client} from '@stomp/stompjs';\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport {ChatMessage} from '../Models/ChatMessage';\nimport {ProfileService} from \"./profile.service\";\nimport {ProfileTotal} from \"../Models/ProfileTotal\";\nimport {MegaNotification} from \"../Models/MegaNotification\";\nimport {environment} from \"../../environments/environment.prod\";\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class WebsocketServiceNotification {\n    private stompClient!: Client;\n    private megaNotification: BehaviorSubject<MegaNotification[]> = new BehaviorSubject<MegaNotification[]>([]); // Lista de mensajes\n\n    constructor(\n      private profileService: ProfileService // Inyecta el ProfileService\n    ) {}\n\n    connectToNotification() {\n      let token = sessionStorage.getItem('token') || '';\n      this.profileService.getProfile(token).subscribe({\n          next: (profile:ProfileTotal) => {\n            this.connect(profile.id);\n          },\n          error: (error) => {\n              console.error('Error al cargar el perfil:', error);\n          },\n        complete: () => {\n          console.log('Profile loaded');\n        }\n      })\n    }\n\n    private connect(roomId: number) {\n\n        const webSocketUrl = environment.apiUrl + `/ws-native`; // URL del servidor WebSocket nativo\n        this.stompClient = new Client({\n            webSocketFactory: () => new WebSocket(webSocketUrl),\n            reconnectDelay: 5000,\n            debug: (str) => console.log(str),\n            onConnect: () => {\n                console.log('Conectado al servidor WebSocket nativo');\n                this.stompClient.subscribe(`/topic/roomNotification/` + roomId, (message) => {\n                    try {\n                        const chatMessage: MegaNotification = JSON.parse(message.body);\n                        console.log('ChatMessage: ', chatMessage);\n                        const currentMessages = this.megaNotification.getValue(); // Obtener los mensajes actuales\n                        this.megaNotification.next([chatMessage]); // Emitir nuevos mensajes\n                    } catch (error) {\n                        console.error('Error al procesar el mensaje recibido:', error);\n                    }\n                });\n            },\n            onStompError: (frame) => {\n                console.error('Error en WebSocket: ', frame.headers['message']);\n            },\n        });\n\n        this.stompClient.activate();\n    }\n\n        // Obtener mensajes de un grupo\n    getMessageObservable(): Observable<MegaNotification[]> {\n        return this.megaNotification.asObservable();\n    }\n\n    sendMessage(chatMessage: ChatMessage) {\n        if (this.stompClient && this.stompClient.connected) {\n            const message = JSON.stringify(chatMessage);\n            this.stompClient.publish({\n                destination: `/app/roomNotification/${chatMessage.groupId}`,\n                body: message,\n            });\n        } else {\n            console.error('No se puede enviar el mensaje: WebSocket no está conectado.');\n        }\n    }\n}\n", "import {MenuComponent} from \"./Screen/menu/menu.component\";\r\nimport {IonicModule, ModalController, ModalOptions, ToastButton} from \"@ionic/angular\";\r\nimport {SuggestionsComponent} from \"./Screen/suggestions/suggestions.component\";\r\nimport {Component, HostListener, OnDestroy, OnInit} from \"@angular/core\";\r\nimport {ActivatedRoute, NavigationEnd, Router} from \"@angular/router\";\r\nimport {MenuSuggestionsService} from \"./Service/menusuggestionsService.service\";\r\nimport {NgIf} from \"@angular/common\";\r\nimport {MenuoriginalComponent} from \"./Screen/menuoriginal/menuoriginal.component\";\r\nimport {FooterComponent} from \"./Screen/footer/footer.component\";\r\nimport {Menu} from \"./Service/Menu.service\";\r\nimport {addIcons} from \"ionicons\";\r\nimport {addCircle, chatbubbles, heart, logoIonitron, paperPlaneOutline, personAdd, settingsSharp} from \"ionicons/icons\";\r\nimport {NewPostComponent} from \"./Screen/new-post/new-post.component\";\r\nimport {WebsocketServiceNotification} from \"./Service/WebSocketNotification\";\r\nimport {ToastController} from '@ionic/angular/standalone';\r\nimport {MegaNotification} from \"./Models/MegaNotification\";\r\n\r\n@Component({\r\n    selector: \"app-root\",\r\n    templateUrl: \"app.component.html\",\r\n    imports: [\r\n        MenuComponent,\r\n        IonicModule,\r\n        NgIf,\r\n        MenuoriginalComponent,\r\n        FooterComponent,\r\n        SuggestionsComponent,\r\n    ],\r\n    standalone: true,\r\n})\r\nexport class AppComponent implements OnInit, OnDestroy {\r\n    menuVisible = true;\r\n    suggestionsVisible = true;\r\n    useAlternateMenu: boolean = false;\r\n    headerVisible = true;\r\n    footerVisible = true;\r\n    isChatRoute = false; // Propiedad para verificar si estás en /chat\r\n    private routerSubscription: any;\r\n\r\n    constructor(\r\n        private menuSuggestionsService: MenuSuggestionsService,\r\n        private router: Router,\r\n        private menuService: Menu,\r\n        private modalController: ModalController,\r\n        private route: ActivatedRoute,\r\n        private webSocketNotificationService: WebsocketServiceNotification,\r\n        private toastController: ToastController\r\n    ) {\r\n        addIcons({settingsSharp, logoIonitron, personAdd, addCircle, chatbubbles, heart, paperPlaneOutline});\r\n    }\r\n\r\n    @HostListener(\"window:resize\", [\"$event\"])\r\n    onResize(event: any) {\r\n        this.updateViewBasedOnScreenSize();\r\n    }\r\n\r\n    closeHamburgerMenuIfNeeded() {\r\n        // Ocultar el menú hamburguesa en pantallas pequeñas al navegar\r\n        if (window.innerWidth < 1000) {\r\n            this.menuVisible = false;\r\n        }\r\n    }\r\n\r\n    webSocketNotification() {\r\n        this.webSocketNotificationService.connectToNotification();\r\n        this.webSocketNotificationService.getMessageObservable().subscribe({\r\n            next: (megaNotification) => {\r\n                this.notification(megaNotification[0]);\r\n            },\r\n            error: (error) => {\r\n                console.error('Error al cargar el perfil:', error);\r\n            },\r\n            complete: () => {\r\n                console.log('Profile loaded');\r\n            }\r\n        });\r\n    }\r\n\r\n    notification(meganotification: MegaNotification) {\r\n        switch (meganotification.type) {\r\n            case \"MESSAGE\":\r\n                if (this.router.url === \"/prueba/\" + meganotification.groupMessenger.grupouser.group.id) {\r\n                    break;\r\n                }\r\n                const mensaje = 'Has recibido un mensaje de ' + meganotification.emitter.nickName;\r\n                const buttons: ToastButton[] = [\r\n                    {\r\n                        side: 'end',\r\n                        text: 'Ver',\r\n                        handler: () => {\r\n                            this.router.navigate([\"/prueba/\"+ meganotification.groupMessenger.grupouser.group.id]);\r\n                        }\r\n                    }\r\n                ];\r\n                this.presentToast('bottom', mensaje, buttons, 'chatbubbles').then(r => console.log(\"Toast presentado\"));\r\n                break;\r\n            case \"NEW_POST\":\r\n                const post = meganotification.emitter.nickName + ' ha publicado un nuevo post';\r\n                const buttonsPost: ToastButton[] = [\r\n                    {\r\n                        side: 'end',\r\n                        text: 'Ver',\r\n                        handler: () => {\r\n                            if (meganotification.postDto?.post) {\r\n                                this.router.navigate([`/post-details/${meganotification.postDto?.post.id}`]);\r\n                            }\r\n                        }\r\n                    }\r\n                ];\r\n                this.presentToast('bottom', post, buttonsPost, 'addCircle').then(r => console.log(\"Toast presentado\"));\r\n                break;\r\n            case \"NEW_LIKE\":\r\n                const like = meganotification.emitter.nickName + ' ha dado like a tu post';\r\n                const buttonsLike: ToastButton[] = [\r\n                    {\r\n                        side: 'end',\r\n                        text: 'Ver post',\r\n                        handler: () => {\r\n                            if (meganotification.postDto?.post) {\r\n                                this.router.navigate([`/post-details/${meganotification.postDto?.post.id}`]);\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        side: 'end',\r\n                        text: 'Ver perfil',\r\n                        handler: () => {\r\n                            this.router.navigate([`/profile/${meganotification.emitter.id}`]);\r\n                        }\r\n                    }\r\n                ];\r\n                this.presentToast('bottom', like, buttonsLike, 'heart').then(r => console.log(\"Toast presentado\"));\r\n                break;\r\n            case \"NEW_FOLLOWER\":\r\n                const follower = meganotification.emitter.nickName + ' te ha seguido';\r\n                const buttonsFollower: ToastButton[] = [\r\n                    {\r\n                        side: 'end',\r\n                        text: 'Ver perfil',\r\n                        handler: () => {\r\n                            this.router.navigate([`/profile/${meganotification.emitter.id}`]);\r\n                        }\r\n                    }\r\n                ];\r\n                this.presentToast('bottom', follower, buttonsFollower, 'personAdd').then(r => console.log(\"Toast presentado\"));\r\n                break;\r\n            case \"NEW_COMMENT\":\r\n                const comment = meganotification.emitter.nickName + ' ha comentado tu post';\r\n                const buttonsComment: ToastButton[] = [\r\n                    {\r\n                        side: 'end',\r\n                        text: 'Ver post',\r\n                        handler: () => {\r\n                            if (meganotification.postDto?.post) {\r\n                                this.router.navigate([`/post-details/${meganotification.postDto?.post.id}`]);\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        side: 'end',\r\n                        text: 'Ver perfil',\r\n                        handler: () => {\r\n                            this.router.navigate([`/profile/${meganotification.emitter.id}`]);\r\n                        }\r\n                    }\r\n                ];\r\n                this.presentToast('bottom', comment, buttonsComment, 'chatbubbles').then(r => console.log(\"Toast presentado\"));\r\n                break;\r\n        }\r\n        // this.presentToast('bottom', meganotification.emitter.nickName).then(r => console.log(\"Toast presentado\"));\r\n    }\r\n\r\n    async presentToast(position: 'top' | 'middle' | 'bottom', message: string = 'Hello World!', buttons: ToastButton[] = [], Icon?: 'chatbubbles' | 'addCircle' | 'personAdd' | 'heart') {\r\n        const toast = await this.toastController.create({\r\n            message: message,\r\n            duration: 1500,\r\n            position: position,\r\n            buttons: buttons,\r\n            icon: Icon\r\n        });\r\n\r\n        await toast.present();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.webSocketNotification();\r\n        // Configuración inicial basada en el tamaño de pantalla\r\n        this.updateViewBasedOnScreenSize();\r\n        this.menuService.useAlternateMenu$.subscribe((useAlternateMenu) => {\r\n            this.useAlternateMenu = useAlternateMenu;\r\n        });\r\n        // Escuchar eventos de navegación\r\n        this.router.events.subscribe((event) => {\r\n            if (event instanceof NavigationEnd) {\r\n                const currentUrl = this.router.url;\r\n                const queryParams = this.route.snapshot.queryParams;\r\n                // Verificar si la ruta actual es /chat\r\n                this.isChatRoute = currentUrl === \"/chat\";\r\n                // Configurar visibilidad del footer según la ruta\r\n                const hideFooter = [\"/chat\"].includes(currentUrl);\r\n                this.footerVisible = !hideFooter;\r\n                // Configurar visibilidad de menú y sugerencias según la ruta\r\n                const hideMenus = [\"/login\", \"/registro\", \"/recu\"].includes(currentUrl) || queryParams['fromShare'] === \"true\";\r\n                this.menuSuggestionsService.setMenuVisible(!hideMenus);\r\n                this.menuSuggestionsService.setSuggestionsVisible(!hideMenus);\r\n                // Ocultar menú hamburguesa si es necesario\r\n                this.closeHamburgerMenuIfNeeded();\r\n                // Actualizar estado basado en tamaño de pantalla\r\n                this.updateViewBasedOnScreenSize();\r\n            }\r\n        });\r\n        // Suscribirse a los cambios de visibilidad\r\n        this.menuSuggestionsService.menuVisible$.subscribe((visible) => {\r\n            this.menuVisible = visible;\r\n        });\r\n        this.menuSuggestionsService.suggestionsVisible$.subscribe((visible) => {\r\n            this.suggestionsVisible = visible;\r\n        });\r\n        this.route.queryParams.subscribe(params => {\r\n            console.log(\"Query Params:\", params);\r\n            if (params['fromShare'] === \"true\") {\r\n                console.log(\"Ocultando menús por fromShare\");\r\n                setTimeout(() => {\r\n                    this.menuSuggestionsService.setMenuVisible(false);\r\n                    this.menuSuggestionsService.setSuggestionsVisible(false);\r\n                }, 0);\r\n            }\r\n        });\r\n    }\r\n\r\n    updateViewBasedOnScreenSize() {\r\n        const screenWidth = window.innerWidth;\r\n        const isAuthRoute = [\"/login\", \"/registro\", \"/recu\"].includes(this.router.url);\r\n        const isChatRoute = [\"/chat\"].includes(this.router.url);\r\n        // Si es una ruta de autenticación, los menús no se muestran\r\n        if (isAuthRoute) {\r\n            this.menuVisible = false;\r\n            this.suggestionsVisible = false;\r\n        } else {\r\n            this.menuVisible = screenWidth > 1000;\r\n            this.suggestionsVisible = screenWidth > 1000;\r\n        }\r\n        // Configurar visibilidad del header y footer\r\n        this.headerVisible = screenWidth < 1000 && !isAuthRoute;\r\n        this.footerVisible = screenWidth < 1000 && !isAuthRoute && !isChatRoute;\r\n    }\r\n\r\n    async openAddPostModal() {\r\n        const modal = await this.modalController.create({\r\n            component: NewPostComponent,\r\n        } as ModalOptions);\r\n        await modal.present();\r\n    }\r\n\r\n    logOut() {\r\n        sessionStorage.clear();\r\n        this.router.navigate([\"/login\"]);\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.routerSubscription) {\r\n            this.routerSubscription.unsubscribe();\r\n        }\r\n    }\r\n}\r\n", "<ion-app>\r\n    <!-- Menú lateral fijo para pantallas grandes -->\r\n    <ion-grid class=\"ion-no-padding\" style=\"height: 100%; width: 100%;\">\r\n        <ion-row style=\"height: 100%;\">\r\n            <ion-col\r\n                *ngIf=\"menuVisible\"\r\n                size=\"3\"\r\n                class=\"menuizq-column ion-no-padding\"\r\n                style=\"height: 100%;\"\r\n            >\r\n                <app-menu *ngIf=\"useAlternateMenu\"></app-menu>\r\n                <app-menuoriginal *ngIf=\"!useAlternateMenu\"></app-menuoriginal>\r\n            </ion-col>\r\n\r\n            <!-- Contenido principal -->\r\n            <ion-col\r\n                class=\"ion-no-padding content-column\"\r\n                style=\"height: 100%;\">\r\n                <div class=\"ion-page\" id=\"main-content\">\r\n                    <ion-header *ngIf=\"headerVisible\">\r\n                        <ion-toolbar [style.--background]=\"isChatRoute ? '#272727FF' : 'transparent'\">\r\n                            <ion-buttons slot=\"start\">\r\n                                <!-- Botón de menú hamburguesa solo en pantallas pequeñas -->\r\n                                <ion-menu-button *ngIf=\"!menuVisible\"></ion-menu-button>\r\n                            </ion-buttons>\r\n                            <ion-title>PowerZone</ion-title>\r\n                        </ion-toolbar>\r\n\r\n\r\n                    </ion-header>\r\n                    <ion-content fullscreen>\r\n                        <ion-router-outlet></ion-router-outlet>\r\n                    </ion-content>\r\n                </div>\r\n            </ion-col>\r\n\r\n            <!-- Sugerencias -->\r\n            <ion-col\r\n                *ngIf=\"suggestionsVisible\"\r\n                size=\"3\"\r\n                class=\"ion-no-padding\"\r\n                style=\"height: 100%;\"\r\n            >\r\n                <app-suggestions></app-suggestions>\r\n            </ion-col>\r\n        </ion-row>\r\n    </ion-grid>\r\n\r\n    <!-- Menú hamburguesa para pantallas pequeñas -->\r\n    <ion-menu *ngIf=\"!menuVisible\" contentId=\"main-content\" side=\"start\" type=\"overlay\">\r\n        <ion-header>\r\n            <ion-toolbar>\r\n                <ion-title>Menú</ion-title>\r\n            </ion-toolbar>\r\n        </ion-header>\r\n        <ion-content>\r\n            <ion-list>\r\n                <ion-item id=\"home\">\r\n                    <a style=\"color: white; text-decoration: none;\" href=\"/posts\">\r\n                        <ion-icon name=\"home\" slot=\"start\"></ion-icon>\r\n                        Inicio\r\n                    </a>\r\n                </ion-item>\r\n\r\n                <ion-item>\r\n                    <a style=\"color: white; text-decoration: none;\" href=\"/search\">\r\n                        <ion-icon name=\"search\" slot=\"start\"></ion-icon>\r\n                        Buscar\r\n                    </a>\r\n                </ion-item>\r\n\r\n                <ion-item>\r\n                    <a style=\"color: white; text-decoration: none;\" (click)=\"openAddPostModal()\">\r\n                        <ion-icon name=\"add\" slot=\"start\"></ion-icon>\r\n                        Añadir Post\r\n                    </a>\r\n                </ion-item>\r\n\r\n                <ion-item>\r\n                    <a style=\"color: white; text-decoration: none;\" href=\"/mensajes\">\r\n                        <ion-icon name=\"paper-plane-outline\" aria-hidden=\"true\" slot=\"start\"></ion-icon>\r\n                        Mensajes\r\n                    </a>\r\n                </ion-item>\r\n\r\n                <ion-item>\r\n                    <a style=\"color: white; text-decoration: none;\" href=\"/health\">\r\n                      <ion-icon name=\"logo-ionitron\" aria-hidden=\"true\" slot=\"start\"></ion-icon>\r\n                        ChatBot\r\n                    </a>\r\n                </ion-item>\r\n\r\n                <ion-item>\r\n                    <a style=\"color: white; text-decoration: none;\" href=\"/notification\">\r\n                        <ion-icon name=\"notifications\" slot=\"start\"></ion-icon>\r\n                        Notificaciones\r\n                    </a>\r\n                </ion-item>\r\n\r\n                <ion-item>\r\n                    <a style=\"color: white; text-decoration: none;\" href=\"/profile\">\r\n                        <ion-icon name=\"person-circle-outline\" slot=\"start\"></ion-icon>\r\n                        Perfil\r\n                    </a>\r\n                </ion-item>\r\n\r\n              <ion-item>\r\n                <a style=\"color: white; text-decoration: none;\" href=\"/settings\">\r\n                  <ion-icon name=\"settings-sharp\" slot=\"start\"></ion-icon>\r\n                  Ajustes del perfil\r\n                </a>\r\n              </ion-item>\r\n\r\n                <ion-item>\r\n                    <a style=\"color: white; text-decoration: none;\" (click)=\"logOut()\">\r\n                        <ion-icon name=\"log-in-outline\" slot=\"start\"></ion-icon>\r\n                        Cerrar Sesión\r\n                    </a>\r\n                </ion-item>\r\n\r\n            </ion-list>\r\n        </ion-content>\r\n    </ion-menu>\r\n    <app-footer *ngIf=\"footerVisible\"></app-footer>\r\n</ion-app>\r\n", "import { bootstrapApplication } from '@angular/platform-browser';\r\nimport { RouteReuseStrategy, provideRouter, withPreloading, PreloadAllModules } from '@angular/router';\r\nimport { IonicRouteStrategy, provideIonicAngular } from '@ionic/angular/standalone';\r\nimport { provideHttpClient } from '@angular/common/http';\r\n\r\nimport { routes } from './app/app.routes';\r\nimport { AppComponent } from './app/app.component';\r\n\r\nbootstrapApplication(AppComponent, {\r\n    providers: [\r\n        { provide: RouteReuseStrategy, useClass: IonicRouteStrategy },\r\n        provideIonicAngular(),\r\n        provideHttpClient(),\r\n        provideRouter(routes, withPreloading(PreloadAllModules)),\r\n    ],\r\n});\r\n"],
  "mappings": "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",
  "names": []
}
